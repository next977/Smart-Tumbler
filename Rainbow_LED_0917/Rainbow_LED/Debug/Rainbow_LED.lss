
Rainbow_LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000cbe  00000d52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cbe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  0080010a  0080010a  00000d5c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d5c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d8c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000172a  00000000  00000000  00000e80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000494  00000000  00000000  000025aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b67  00000000  00000000  00002a3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000278  00000000  00000000  000035a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000036d  00000000  00000000  00003820  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016b8  00000000  00000000  00003b8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00005245  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	4f c0       	rjmp	.+158    	; 0xe0 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee eb       	ldi	r30, 0xBE	; 190
  a0:	fc e0       	ldi	r31, 0x0C	; 12
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 31       	cpi	r26, 0x1A	; 26
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	3a d0       	rcall	.+116    	; 0x138 <main>
  c4:	fa c5       	rjmp	.+3060   	; 0xcba <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TIMER_Init>:
	CurrentDisplay[0] ='0'+((nData % 100000) /10000);
	CurrentDisplay[1] ='0'+((nData % 10000) /1000);
	CurrentDisplay[2] ='0'+((nData % 1000) /100); //nData 가 756 이면 757을 1000으로 나눈 나머지는 756이고 그것을 100으로 나누면 7의몫이다.
	CurrentDisplay[3] ='0'+((nData % 100) /10);
	CurrentDisplay[4] ='0'+((nData % 10) /1);
}
  c8:	87 e0       	ldi	r24, 0x07	; 7
  ca:	83 bf       	out	0x33, r24	; 51
  cc:	82 ed       	ldi	r24, 0xD2	; 210
  ce:	82 bf       	out	0x32, r24	; 50
  d0:	87 b7       	in	r24, 0x37	; 55
  d2:	81 60       	ori	r24, 0x01	; 1
  d4:	87 bf       	out	0x37, r24	; 55
  d6:	86 b7       	in	r24, 0x36	; 54
  d8:	81 60       	ori	r24, 0x01	; 1
  da:	86 bf       	out	0x36, r24	; 54
  dc:	78 94       	sei
  de:	08 95       	ret

000000e0 <__vector_16>:
  e0:	1f 92       	push	r1
  e2:	0f 92       	push	r0
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	0f 92       	push	r0
  e8:	11 24       	eor	r1, r1
  ea:	2f 93       	push	r18
  ec:	8f 93       	push	r24
  ee:	9f 93       	push	r25
  f0:	82 ed       	ldi	r24, 0xD2	; 210
  f2:	82 bf       	out	0x32, r24	; 50
  f4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
  f8:	8f 5f       	subi	r24, 0xFF	; 255
  fa:	84 36       	cpi	r24, 0x64	; 100
  fc:	19 f0       	breq	.+6      	; 0x104 <__vector_16+0x24>
  fe:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 102:	0c c0       	rjmp	.+24     	; 0x11c <__vector_16+0x3c>
 104:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
 108:	34 9b       	sbis	0x06, 4	; 6
 10a:	fe cf       	rjmp	.-4      	; 0x108 <__vector_16+0x28>
 10c:	84 b1       	in	r24, 0x04	; 4
 10e:	25 b1       	in	r18, 0x05	; 5
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	92 2b       	or	r25, r18
 114:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <g_unAdcValue+0x1>
 118:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <g_unAdcValue>
 11c:	9f 91       	pop	r25
 11e:	8f 91       	pop	r24
 120:	2f 91       	pop	r18
 122:	0f 90       	pop	r0
 124:	0f be       	out	0x3f, r0	; 63
 126:	0f 90       	pop	r0
 128:	1f 90       	pop	r1
 12a:	18 95       	reti

0000012c <ADC_Init>:
 12c:	81 ec       	ldi	r24, 0xC1	; 193
 12e:	87 b9       	out	0x07, r24	; 7
 130:	86 ea       	ldi	r24, 0xA6	; 166
 132:	86 b9       	out	0x06, r24	; 6
 134:	36 9a       	sbi	0x06, 6	; 6
 136:	08 95       	ret

00000138 <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 138:	8f e3       	ldi	r24, 0x3F	; 63
 13a:	9c e9       	ldi	r25, 0x9C	; 156
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <main+0x4>
 140:	00 c0       	rjmp	.+0      	; 0x142 <main+0xa>
 142:	00 00       	nop
	unsigned char ucLowValue	=	0; //ADC 변환 결과 값에서 ADCL 값을 저장할 변수를 선언
	unsigned char ucHighValue	=	0;	//ADC 변환 결과 값에서 ADCH 값을 저장할 변수를 선언.
	unsigned char line = 0;
	
	_delay_ms(10);
	NS_Rainbow_init(USELED, PB, 0);
 144:	40 e0       	ldi	r20, 0x00	; 0
 146:	68 e3       	ldi	r22, 0x38	; 56
 148:	80 e4       	ldi	r24, 0x40	; 64
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	ec d2       	rcall	.+1496   	; 0x726 <NS_Rainbow_init>
	setBrightness(50); 	// 0,1(OFF) ~ 255
 14e:	82 e3       	ldi	r24, 0x32	; 50
 150:	66 d3       	rcall	.+1740   	; 0x81e <setBrightness>
	
	
	TIMER_Init();
 152:	ba df       	rcall	.-140    	; 0xc8 <TIMER_Init>
	ADC_Init ();		// PORTF = ADC1
 154:	eb df       	rcall	.-42     	; 0x12c <ADC_Init>
	
	while (1)
	{

		if((g_unAdcValue>900)&&(g_unAdcValue<=1000))
 156:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <g_unAdcValue>
 15a:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <g_unAdcValue+0x1>
 15e:	9c 01       	movw	r18, r24
 160:	25 58       	subi	r18, 0x85	; 133
 162:	33 40       	sbci	r19, 0x03	; 3
 164:	24 36       	cpi	r18, 0x64	; 100
 166:	31 05       	cpc	r19, r1
 168:	08 f0       	brcs	.+2      	; 0x16c <main+0x34>
 16a:	4c c0       	rjmp	.+152    	; 0x204 <main+0xcc>
 16c:	18 e3       	ldi	r17, 0x38	; 56
		{
		
			for(int i = 7; i >= 0; i--)
			{
				line = i * 8;
				setColor_RGB(0 + line, 0xFF0000);			// RED
 16e:	c1 2f       	mov	r28, r17
 170:	d0 e0       	ldi	r29, 0x00	; 0
 172:	40 e0       	ldi	r20, 0x00	; 0
 174:	50 e0       	ldi	r21, 0x00	; 0
 176:	6f ef       	ldi	r22, 0xFF	; 255
 178:	70 e0       	ldi	r23, 0x00	; 0
 17a:	ce 01       	movw	r24, r28
 17c:	00 d2       	rcall	.+1024   	; 0x57e <setColor_RGB>
				setColor_RGB(1 + line, 0xFF5E00);			// Orange
 17e:	40 e0       	ldi	r20, 0x00	; 0
 180:	5e e5       	ldi	r21, 0x5E	; 94
 182:	6f ef       	ldi	r22, 0xFF	; 255
 184:	70 e0       	ldi	r23, 0x00	; 0
 186:	ce 01       	movw	r24, r28
 188:	01 96       	adiw	r24, 0x01	; 1
 18a:	f9 d1       	rcall	.+1010   	; 0x57e <setColor_RGB>
				setColor_RGB(2 + line, 0xFFE400);			// Yellow
 18c:	40 e0       	ldi	r20, 0x00	; 0
 18e:	54 ee       	ldi	r21, 0xE4	; 228
 190:	6f ef       	ldi	r22, 0xFF	; 255
 192:	70 e0       	ldi	r23, 0x00	; 0
 194:	ce 01       	movw	r24, r28
 196:	02 96       	adiw	r24, 0x02	; 2
 198:	f2 d1       	rcall	.+996    	; 0x57e <setColor_RGB>
				setColor_RGB(3 + line, 0x1DDB16);			// Green
 19a:	46 e1       	ldi	r20, 0x16	; 22
 19c:	5b ed       	ldi	r21, 0xDB	; 219
 19e:	6d e1       	ldi	r22, 0x1D	; 29
 1a0:	70 e0       	ldi	r23, 0x00	; 0
 1a2:	ce 01       	movw	r24, r28
 1a4:	03 96       	adiw	r24, 0x03	; 3
 1a6:	eb d1       	rcall	.+982    	; 0x57e <setColor_RGB>
				setColor_RGB(4 + line, 0x0000FF);			// Blue
 1a8:	4f ef       	ldi	r20, 0xFF	; 255
 1aa:	50 e0       	ldi	r21, 0x00	; 0
 1ac:	60 e0       	ldi	r22, 0x00	; 0
 1ae:	70 e0       	ldi	r23, 0x00	; 0
 1b0:	ce 01       	movw	r24, r28
 1b2:	04 96       	adiw	r24, 0x04	; 4
 1b4:	e4 d1       	rcall	.+968    	; 0x57e <setColor_RGB>
				setColor_RGB(5 + line, 0x0100FF);			// Dark Blue
 1b6:	4f ef       	ldi	r20, 0xFF	; 255
 1b8:	50 e0       	ldi	r21, 0x00	; 0
 1ba:	61 e0       	ldi	r22, 0x01	; 1
 1bc:	70 e0       	ldi	r23, 0x00	; 0
 1be:	ce 01       	movw	r24, r28
 1c0:	05 96       	adiw	r24, 0x05	; 5
 1c2:	dd d1       	rcall	.+954    	; 0x57e <setColor_RGB>
				setColor_RGB(6 + line, 0x3F0099);			// Purple
 1c4:	49 e9       	ldi	r20, 0x99	; 153
 1c6:	50 e0       	ldi	r21, 0x00	; 0
 1c8:	6f e3       	ldi	r22, 0x3F	; 63
 1ca:	70 e0       	ldi	r23, 0x00	; 0
 1cc:	ce 01       	movw	r24, r28
 1ce:	06 96       	adiw	r24, 0x06	; 6
 1d0:	d6 d1       	rcall	.+940    	; 0x57e <setColor_RGB>
				show();
 1d2:	43 d2       	rcall	.+1158   	; 0x65a <show>
 1d4:	9f ef       	ldi	r25, 0xFF	; 255
 1d6:	21 ee       	ldi	r18, 0xE1	; 225
 1d8:	84 e0       	ldi	r24, 0x04	; 4
 1da:	91 50       	subi	r25, 0x01	; 1
 1dc:	20 40       	sbci	r18, 0x00	; 0
 1de:	80 40       	sbci	r24, 0x00	; 0
 1e0:	e1 f7       	brne	.-8      	; 0x1da <main+0xa2>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <main+0xac>
 1e4:	00 00       	nop
 1e6:	18 50       	subi	r17, 0x08	; 8
	{

		if((g_unAdcValue>900)&&(g_unAdcValue<=1000))
		{
		
			for(int i = 7; i >= 0; i--)
 1e8:	18 3f       	cpi	r17, 0xF8	; 248
 1ea:	09 f0       	breq	.+2      	; 0x1ee <main+0xb6>
 1ec:	c0 cf       	rjmp	.-128    	; 0x16e <main+0x36>
 1ee:	9f ef       	ldi	r25, 0xFF	; 255
 1f0:	29 e6       	ldi	r18, 0x69	; 105
 1f2:	88 e1       	ldi	r24, 0x18	; 24
 1f4:	91 50       	subi	r25, 0x01	; 1
 1f6:	20 40       	sbci	r18, 0x00	; 0
 1f8:	80 40       	sbci	r24, 0x00	; 0
 1fa:	e1 f7       	brne	.-8      	; 0x1f4 <main+0xbc>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <main+0xc6>
 1fe:	00 00       	nop
				setColor_RGB(6 + line, 0x3F0099);			// Purple
				show();
				_delay_ms(100);
			}	
			_delay_ms(500);
			clear();
 200:	01 d3       	rcall	.+1538   	; 0x804 <clear>
 202:	a9 cf       	rjmp	.-174    	; 0x156 <main+0x1e>
		}
		else if((g_unAdcValue>800)&&(g_unAdcValue<=900))
 204:	9c 01       	movw	r18, r24
 206:	21 52       	subi	r18, 0x21	; 33
 208:	33 40       	sbci	r19, 0x03	; 3
 20a:	24 36       	cpi	r18, 0x64	; 100
 20c:	31 05       	cpc	r19, r1
 20e:	08 f0       	brcs	.+2      	; 0x212 <main+0xda>
 210:	44 c0       	rjmp	.+136    	; 0x29a <main+0x162>
 212:	18 e3       	ldi	r17, 0x38	; 56
		{
		
			for(int i = 7; i >= 0; i--)
			{
				line = i * 8;
				setColor_RGB(0 + line, 0xFF0000);			// RED
 214:	c1 2f       	mov	r28, r17
 216:	d0 e0       	ldi	r29, 0x00	; 0
 218:	40 e0       	ldi	r20, 0x00	; 0
 21a:	50 e0       	ldi	r21, 0x00	; 0
 21c:	6f ef       	ldi	r22, 0xFF	; 255
 21e:	70 e0       	ldi	r23, 0x00	; 0
 220:	ce 01       	movw	r24, r28
 222:	ad d1       	rcall	.+858    	; 0x57e <setColor_RGB>
				setColor_RGB(1 + line, 0xFF5E00);			// Orange
 224:	40 e0       	ldi	r20, 0x00	; 0
 226:	5e e5       	ldi	r21, 0x5E	; 94
 228:	6f ef       	ldi	r22, 0xFF	; 255
 22a:	70 e0       	ldi	r23, 0x00	; 0
 22c:	ce 01       	movw	r24, r28
 22e:	01 96       	adiw	r24, 0x01	; 1
 230:	a6 d1       	rcall	.+844    	; 0x57e <setColor_RGB>
				setColor_RGB(2 + line, 0xFFE400);			// Yellow
 232:	40 e0       	ldi	r20, 0x00	; 0
 234:	54 ee       	ldi	r21, 0xE4	; 228
 236:	6f ef       	ldi	r22, 0xFF	; 255
 238:	70 e0       	ldi	r23, 0x00	; 0
 23a:	ce 01       	movw	r24, r28
 23c:	02 96       	adiw	r24, 0x02	; 2
 23e:	9f d1       	rcall	.+830    	; 0x57e <setColor_RGB>
				setColor_RGB(3 + line, 0x1DDB16);			// Green
 240:	46 e1       	ldi	r20, 0x16	; 22
 242:	5b ed       	ldi	r21, 0xDB	; 219
 244:	6d e1       	ldi	r22, 0x1D	; 29
 246:	70 e0       	ldi	r23, 0x00	; 0
 248:	ce 01       	movw	r24, r28
 24a:	03 96       	adiw	r24, 0x03	; 3
 24c:	98 d1       	rcall	.+816    	; 0x57e <setColor_RGB>
				setColor_RGB(4 + line, 0x0000FF);			// Blue
 24e:	4f ef       	ldi	r20, 0xFF	; 255
 250:	50 e0       	ldi	r21, 0x00	; 0
 252:	60 e0       	ldi	r22, 0x00	; 0
 254:	70 e0       	ldi	r23, 0x00	; 0
 256:	ce 01       	movw	r24, r28
 258:	04 96       	adiw	r24, 0x04	; 4
 25a:	91 d1       	rcall	.+802    	; 0x57e <setColor_RGB>
				setColor_RGB(5 + line, 0x0100FF);			// Dark Blue
 25c:	4f ef       	ldi	r20, 0xFF	; 255
 25e:	50 e0       	ldi	r21, 0x00	; 0
 260:	61 e0       	ldi	r22, 0x01	; 1
 262:	70 e0       	ldi	r23, 0x00	; 0
 264:	ce 01       	movw	r24, r28
 266:	05 96       	adiw	r24, 0x05	; 5
 268:	8a d1       	rcall	.+788    	; 0x57e <setColor_RGB>
				show();
 26a:	f7 d1       	rcall	.+1006   	; 0x65a <show>
 26c:	9f ef       	ldi	r25, 0xFF	; 255
 26e:	21 ee       	ldi	r18, 0xE1	; 225
 270:	84 e0       	ldi	r24, 0x04	; 4
 272:	91 50       	subi	r25, 0x01	; 1
 274:	20 40       	sbci	r18, 0x00	; 0
 276:	80 40       	sbci	r24, 0x00	; 0
 278:	e1 f7       	brne	.-8      	; 0x272 <main+0x13a>
 27a:	00 c0       	rjmp	.+0      	; 0x27c <main+0x144>
 27c:	00 00       	nop
 27e:	18 50       	subi	r17, 0x08	; 8
			clear();
		}
		else if((g_unAdcValue>800)&&(g_unAdcValue<=900))
		{
		
			for(int i = 7; i >= 0; i--)
 280:	18 3f       	cpi	r17, 0xF8	; 248
 282:	41 f6       	brne	.-112    	; 0x214 <main+0xdc>
 284:	9f ef       	ldi	r25, 0xFF	; 255
 286:	29 e6       	ldi	r18, 0x69	; 105
 288:	88 e1       	ldi	r24, 0x18	; 24
 28a:	91 50       	subi	r25, 0x01	; 1
 28c:	20 40       	sbci	r18, 0x00	; 0
 28e:	80 40       	sbci	r24, 0x00	; 0
 290:	e1 f7       	brne	.-8      	; 0x28a <main+0x152>
 292:	00 c0       	rjmp	.+0      	; 0x294 <main+0x15c>
 294:	00 00       	nop
				setColor_RGB(5 + line, 0x0100FF);			// Dark Blue
				show();
				_delay_ms(100);
			}
			_delay_ms(500);
			clear();
 296:	b6 d2       	rcall	.+1388   	; 0x804 <clear>
 298:	5e cf       	rjmp	.-324    	; 0x156 <main+0x1e>
		}
		else if((g_unAdcValue>600)&&(g_unAdcValue<=800))
 29a:	9c 01       	movw	r18, r24
 29c:	29 55       	subi	r18, 0x59	; 89
 29e:	32 40       	sbci	r19, 0x02	; 2
 2a0:	28 3c       	cpi	r18, 0xC8	; 200
 2a2:	31 05       	cpc	r19, r1
 2a4:	08 f0       	brcs	.+2      	; 0x2a8 <main+0x170>
 2a6:	3d c0       	rjmp	.+122    	; 0x322 <main+0x1ea>
 2a8:	18 e3       	ldi	r17, 0x38	; 56
		{
		
			for(int i = 7; i >= 0; i--)
			{
				line = i * 8;
				setColor_RGB(0 + line, 0xFF0000);			// RED
 2aa:	c1 2f       	mov	r28, r17
 2ac:	d0 e0       	ldi	r29, 0x00	; 0
 2ae:	40 e0       	ldi	r20, 0x00	; 0
 2b0:	50 e0       	ldi	r21, 0x00	; 0
 2b2:	6f ef       	ldi	r22, 0xFF	; 255
 2b4:	70 e0       	ldi	r23, 0x00	; 0
 2b6:	ce 01       	movw	r24, r28
 2b8:	62 d1       	rcall	.+708    	; 0x57e <setColor_RGB>
				setColor_RGB(1 + line, 0xFF5E00);			// Orange
 2ba:	40 e0       	ldi	r20, 0x00	; 0
 2bc:	5e e5       	ldi	r21, 0x5E	; 94
 2be:	6f ef       	ldi	r22, 0xFF	; 255
 2c0:	70 e0       	ldi	r23, 0x00	; 0
 2c2:	ce 01       	movw	r24, r28
 2c4:	01 96       	adiw	r24, 0x01	; 1
 2c6:	5b d1       	rcall	.+694    	; 0x57e <setColor_RGB>
				setColor_RGB(2 + line, 0xFFE400);			// Yellow
 2c8:	40 e0       	ldi	r20, 0x00	; 0
 2ca:	54 ee       	ldi	r21, 0xE4	; 228
 2cc:	6f ef       	ldi	r22, 0xFF	; 255
 2ce:	70 e0       	ldi	r23, 0x00	; 0
 2d0:	ce 01       	movw	r24, r28
 2d2:	02 96       	adiw	r24, 0x02	; 2
 2d4:	54 d1       	rcall	.+680    	; 0x57e <setColor_RGB>
				setColor_RGB(3 + line, 0x1DDB16);			// Green
 2d6:	46 e1       	ldi	r20, 0x16	; 22
 2d8:	5b ed       	ldi	r21, 0xDB	; 219
 2da:	6d e1       	ldi	r22, 0x1D	; 29
 2dc:	70 e0       	ldi	r23, 0x00	; 0
 2de:	ce 01       	movw	r24, r28
 2e0:	03 96       	adiw	r24, 0x03	; 3
 2e2:	4d d1       	rcall	.+666    	; 0x57e <setColor_RGB>
				setColor_RGB(4 + line, 0x0000FF);			// Blue
 2e4:	4f ef       	ldi	r20, 0xFF	; 255
 2e6:	50 e0       	ldi	r21, 0x00	; 0
 2e8:	60 e0       	ldi	r22, 0x00	; 0
 2ea:	70 e0       	ldi	r23, 0x00	; 0
 2ec:	ce 01       	movw	r24, r28
 2ee:	04 96       	adiw	r24, 0x04	; 4
 2f0:	46 d1       	rcall	.+652    	; 0x57e <setColor_RGB>
				show();
 2f2:	b3 d1       	rcall	.+870    	; 0x65a <show>
 2f4:	9f ef       	ldi	r25, 0xFF	; 255
 2f6:	21 ee       	ldi	r18, 0xE1	; 225
 2f8:	84 e0       	ldi	r24, 0x04	; 4
 2fa:	91 50       	subi	r25, 0x01	; 1
 2fc:	20 40       	sbci	r18, 0x00	; 0
 2fe:	80 40       	sbci	r24, 0x00	; 0
 300:	e1 f7       	brne	.-8      	; 0x2fa <main+0x1c2>
 302:	00 c0       	rjmp	.+0      	; 0x304 <main+0x1cc>
 304:	00 00       	nop
 306:	18 50       	subi	r17, 0x08	; 8
			clear();
		}
		else if((g_unAdcValue>600)&&(g_unAdcValue<=800))
		{
		
			for(int i = 7; i >= 0; i--)
 308:	18 3f       	cpi	r17, 0xF8	; 248
 30a:	79 f6       	brne	.-98     	; 0x2aa <main+0x172>
 30c:	9f ef       	ldi	r25, 0xFF	; 255
 30e:	29 e6       	ldi	r18, 0x69	; 105
 310:	88 e1       	ldi	r24, 0x18	; 24
 312:	91 50       	subi	r25, 0x01	; 1
 314:	20 40       	sbci	r18, 0x00	; 0
 316:	80 40       	sbci	r24, 0x00	; 0
 318:	e1 f7       	brne	.-8      	; 0x312 <main+0x1da>
 31a:	00 c0       	rjmp	.+0      	; 0x31c <main+0x1e4>
 31c:	00 00       	nop
				setColor_RGB(4 + line, 0x0000FF);			// Blue
				show();
				_delay_ms(100);
			}
			_delay_ms(500);
			clear();
 31e:	72 d2       	rcall	.+1252   	; 0x804 <clear>
 320:	1a cf       	rjmp	.-460    	; 0x156 <main+0x1e>
		}
		else if((g_unAdcValue>500)&&(g_unAdcValue<=600))
 322:	9c 01       	movw	r18, r24
 324:	25 5f       	subi	r18, 0xF5	; 245
 326:	31 40       	sbci	r19, 0x01	; 1
 328:	24 36       	cpi	r18, 0x64	; 100
 32a:	31 05       	cpc	r19, r1
 32c:	b0 f5       	brcc	.+108    	; 0x39a <main+0x262>
 32e:	18 e3       	ldi	r17, 0x38	; 56
		{
			for(int i = 7; i >= 0; i--)
			{
				line = i * 8;
				setColor_RGB(0 + line, 0xFF0000);			// RED
 330:	c1 2f       	mov	r28, r17
 332:	d0 e0       	ldi	r29, 0x00	; 0
 334:	40 e0       	ldi	r20, 0x00	; 0
 336:	50 e0       	ldi	r21, 0x00	; 0
 338:	6f ef       	ldi	r22, 0xFF	; 255
 33a:	70 e0       	ldi	r23, 0x00	; 0
 33c:	ce 01       	movw	r24, r28
 33e:	1f d1       	rcall	.+574    	; 0x57e <setColor_RGB>
				setColor_RGB(1 + line, 0xFF5E00);			// Orange
 340:	40 e0       	ldi	r20, 0x00	; 0
 342:	5e e5       	ldi	r21, 0x5E	; 94
 344:	6f ef       	ldi	r22, 0xFF	; 255
 346:	70 e0       	ldi	r23, 0x00	; 0
 348:	ce 01       	movw	r24, r28
 34a:	01 96       	adiw	r24, 0x01	; 1
 34c:	18 d1       	rcall	.+560    	; 0x57e <setColor_RGB>
				setColor_RGB(2 + line, 0xFFE400);			// Yellow
 34e:	40 e0       	ldi	r20, 0x00	; 0
 350:	54 ee       	ldi	r21, 0xE4	; 228
 352:	6f ef       	ldi	r22, 0xFF	; 255
 354:	70 e0       	ldi	r23, 0x00	; 0
 356:	ce 01       	movw	r24, r28
 358:	02 96       	adiw	r24, 0x02	; 2
 35a:	11 d1       	rcall	.+546    	; 0x57e <setColor_RGB>
				setColor_RGB(3 + line, 0x1DDB16);			// Green
 35c:	46 e1       	ldi	r20, 0x16	; 22
 35e:	5b ed       	ldi	r21, 0xDB	; 219
 360:	6d e1       	ldi	r22, 0x1D	; 29
 362:	70 e0       	ldi	r23, 0x00	; 0
 364:	ce 01       	movw	r24, r28
 366:	03 96       	adiw	r24, 0x03	; 3
 368:	0a d1       	rcall	.+532    	; 0x57e <setColor_RGB>
				show();
 36a:	77 d1       	rcall	.+750    	; 0x65a <show>
 36c:	9f ef       	ldi	r25, 0xFF	; 255
 36e:	21 ee       	ldi	r18, 0xE1	; 225
 370:	84 e0       	ldi	r24, 0x04	; 4
 372:	91 50       	subi	r25, 0x01	; 1
 374:	20 40       	sbci	r18, 0x00	; 0
 376:	80 40       	sbci	r24, 0x00	; 0
 378:	e1 f7       	brne	.-8      	; 0x372 <main+0x23a>
 37a:	00 c0       	rjmp	.+0      	; 0x37c <main+0x244>
 37c:	00 00       	nop
 37e:	18 50       	subi	r17, 0x08	; 8
			_delay_ms(500);
			clear();
		}
		else if((g_unAdcValue>500)&&(g_unAdcValue<=600))
		{
			for(int i = 7; i >= 0; i--)
 380:	18 3f       	cpi	r17, 0xF8	; 248
 382:	b1 f6       	brne	.-84     	; 0x330 <main+0x1f8>
 384:	9f ef       	ldi	r25, 0xFF	; 255
 386:	29 e6       	ldi	r18, 0x69	; 105
 388:	88 e1       	ldi	r24, 0x18	; 24
 38a:	91 50       	subi	r25, 0x01	; 1
 38c:	20 40       	sbci	r18, 0x00	; 0
 38e:	80 40       	sbci	r24, 0x00	; 0
 390:	e1 f7       	brne	.-8      	; 0x38a <main+0x252>
 392:	00 c0       	rjmp	.+0      	; 0x394 <main+0x25c>
 394:	00 00       	nop
				setColor_RGB(3 + line, 0x1DDB16);			// Green
				show();
				_delay_ms(100);
			}
			_delay_ms(500);
			clear();
 396:	36 d2       	rcall	.+1132   	; 0x804 <clear>
 398:	de ce       	rjmp	.-580    	; 0x156 <main+0x1e>
		}
		else if((g_unAdcValue>300)&&(g_unAdcValue<=500))
 39a:	9c 01       	movw	r18, r24
 39c:	2d 52       	subi	r18, 0x2D	; 45
 39e:	31 40       	sbci	r19, 0x01	; 1
 3a0:	28 3c       	cpi	r18, 0xC8	; 200
 3a2:	31 05       	cpc	r19, r1
 3a4:	78 f5       	brcc	.+94     	; 0x404 <__FUSE_REGION_LENGTH__+0x4>
 3a6:	c8 e3       	ldi	r28, 0x38	; 56
		{
		
			for(int i = 7; i >= 0; i--)
			{
				line = i * 8;
				setColor_RGB(0 + line, 0xFF0000);			// RED
 3a8:	0c 2f       	mov	r16, r28
 3aa:	10 e0       	ldi	r17, 0x00	; 0
 3ac:	40 e0       	ldi	r20, 0x00	; 0
 3ae:	50 e0       	ldi	r21, 0x00	; 0
 3b0:	6f ef       	ldi	r22, 0xFF	; 255
 3b2:	70 e0       	ldi	r23, 0x00	; 0
 3b4:	c8 01       	movw	r24, r16
 3b6:	e3 d0       	rcall	.+454    	; 0x57e <setColor_RGB>
				setColor_RGB(1 + line, 0xFF5E00);			// Orange
 3b8:	40 e0       	ldi	r20, 0x00	; 0
 3ba:	5e e5       	ldi	r21, 0x5E	; 94
 3bc:	6f ef       	ldi	r22, 0xFF	; 255
 3be:	70 e0       	ldi	r23, 0x00	; 0
 3c0:	c8 01       	movw	r24, r16
 3c2:	01 96       	adiw	r24, 0x01	; 1
 3c4:	dc d0       	rcall	.+440    	; 0x57e <setColor_RGB>
				setColor_RGB(2 + line, 0xFFE400);			// Yellow
 3c6:	40 e0       	ldi	r20, 0x00	; 0
 3c8:	54 ee       	ldi	r21, 0xE4	; 228
 3ca:	6f ef       	ldi	r22, 0xFF	; 255
 3cc:	70 e0       	ldi	r23, 0x00	; 0
 3ce:	c8 01       	movw	r24, r16
 3d0:	02 96       	adiw	r24, 0x02	; 2
 3d2:	d5 d0       	rcall	.+426    	; 0x57e <setColor_RGB>
				show();
 3d4:	42 d1       	rcall	.+644    	; 0x65a <show>
 3d6:	9f ef       	ldi	r25, 0xFF	; 255
 3d8:	21 ee       	ldi	r18, 0xE1	; 225
 3da:	84 e0       	ldi	r24, 0x04	; 4
 3dc:	91 50       	subi	r25, 0x01	; 1
 3de:	20 40       	sbci	r18, 0x00	; 0
 3e0:	80 40       	sbci	r24, 0x00	; 0
 3e2:	e1 f7       	brne	.-8      	; 0x3dc <main+0x2a4>
 3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <main+0x2ae>
 3e6:	00 00       	nop
 3e8:	c8 50       	subi	r28, 0x08	; 8
			clear();
		}
		else if((g_unAdcValue>300)&&(g_unAdcValue<=500))
		{
		
			for(int i = 7; i >= 0; i--)
 3ea:	c8 3f       	cpi	r28, 0xF8	; 248
 3ec:	e9 f6       	brne	.-70     	; 0x3a8 <main+0x270>
 3ee:	9f ef       	ldi	r25, 0xFF	; 255
 3f0:	29 e6       	ldi	r18, 0x69	; 105
 3f2:	88 e1       	ldi	r24, 0x18	; 24
 3f4:	91 50       	subi	r25, 0x01	; 1
 3f6:	20 40       	sbci	r18, 0x00	; 0
 3f8:	80 40       	sbci	r24, 0x00	; 0
 3fa:	e1 f7       	brne	.-8      	; 0x3f4 <main+0x2bc>
 3fc:	00 c0       	rjmp	.+0      	; 0x3fe <main+0x2c6>
 3fe:	00 00       	nop
				setColor_RGB(2 + line, 0xFFE400);			// Yellow
				show();
				_delay_ms(100);
			}
			_delay_ms(500);
			clear();
 400:	01 d2       	rcall	.+1026   	; 0x804 <clear>
 402:	a9 ce       	rjmp	.-686    	; 0x156 <main+0x1e>
		}
		else if((g_unAdcValue>100)&&(g_unAdcValue<=300))
 404:	9c 01       	movw	r18, r24
 406:	25 56       	subi	r18, 0x65	; 101
 408:	31 09       	sbc	r19, r1
 40a:	28 3c       	cpi	r18, 0xC8	; 200
 40c:	31 05       	cpc	r19, r1
 40e:	40 f5       	brcc	.+80     	; 0x460 <__FUSE_REGION_LENGTH__+0x60>
 410:	c8 e3       	ldi	r28, 0x38	; 56
		{
		
			for(int i = 7; i >= 0; i--)
			{
				line = i * 8;
				setColor_RGB(0 + line, 0xFF0000);			// RED
 412:	0c 2f       	mov	r16, r28
 414:	10 e0       	ldi	r17, 0x00	; 0
 416:	40 e0       	ldi	r20, 0x00	; 0
 418:	50 e0       	ldi	r21, 0x00	; 0
 41a:	6f ef       	ldi	r22, 0xFF	; 255
 41c:	70 e0       	ldi	r23, 0x00	; 0
 41e:	c8 01       	movw	r24, r16
 420:	ae d0       	rcall	.+348    	; 0x57e <setColor_RGB>
				setColor_RGB(1 + line, 0xFF5E00);			// Orange
 422:	40 e0       	ldi	r20, 0x00	; 0
 424:	5e e5       	ldi	r21, 0x5E	; 94
 426:	6f ef       	ldi	r22, 0xFF	; 255
 428:	70 e0       	ldi	r23, 0x00	; 0
 42a:	c8 01       	movw	r24, r16
 42c:	01 96       	adiw	r24, 0x01	; 1
 42e:	a7 d0       	rcall	.+334    	; 0x57e <setColor_RGB>
				show();
 430:	14 d1       	rcall	.+552    	; 0x65a <show>
 432:	9f ef       	ldi	r25, 0xFF	; 255
 434:	21 ee       	ldi	r18, 0xE1	; 225
 436:	84 e0       	ldi	r24, 0x04	; 4
 438:	91 50       	subi	r25, 0x01	; 1
 43a:	20 40       	sbci	r18, 0x00	; 0
 43c:	80 40       	sbci	r24, 0x00	; 0
 43e:	e1 f7       	brne	.-8      	; 0x438 <__FUSE_REGION_LENGTH__+0x38>
 440:	00 c0       	rjmp	.+0      	; 0x442 <__FUSE_REGION_LENGTH__+0x42>
 442:	00 00       	nop
 444:	c8 50       	subi	r28, 0x08	; 8
			clear();
		}
		else if((g_unAdcValue>100)&&(g_unAdcValue<=300))
		{
		
			for(int i = 7; i >= 0; i--)
 446:	c8 3f       	cpi	r28, 0xF8	; 248
 448:	21 f7       	brne	.-56     	; 0x412 <__FUSE_REGION_LENGTH__+0x12>
 44a:	9f ef       	ldi	r25, 0xFF	; 255
 44c:	29 e6       	ldi	r18, 0x69	; 105
 44e:	88 e1       	ldi	r24, 0x18	; 24
 450:	91 50       	subi	r25, 0x01	; 1
 452:	20 40       	sbci	r18, 0x00	; 0
 454:	80 40       	sbci	r24, 0x00	; 0
 456:	e1 f7       	brne	.-8      	; 0x450 <__FUSE_REGION_LENGTH__+0x50>
 458:	00 c0       	rjmp	.+0      	; 0x45a <__FUSE_REGION_LENGTH__+0x5a>
 45a:	00 00       	nop
				setColor_RGB(1 + line, 0xFF5E00);			// Orange
				show();
				_delay_ms(100);
			}
			_delay_ms(500);
			clear();
 45c:	d3 d1       	rcall	.+934    	; 0x804 <clear>
 45e:	7b ce       	rjmp	.-778    	; 0x156 <main+0x1e>
		}
		else if((g_unAdcValue>30)&&(g_unAdcValue<=100))
 460:	9c 01       	movw	r18, r24
 462:	2f 51       	subi	r18, 0x1F	; 31
 464:	31 09       	sbc	r19, r1
 466:	26 34       	cpi	r18, 0x46	; 70
 468:	31 05       	cpc	r19, r1
 46a:	00 f5       	brcc	.+64     	; 0x4ac <__FUSE_REGION_LENGTH__+0xac>
 46c:	c8 e3       	ldi	r28, 0x38	; 56
			{
			
				for(int i = 7; i >= 0; i--)
				{
					line = i * 8;
					setColor_RGB(0 + line, 0xFF0000);			// RED
 46e:	40 e0       	ldi	r20, 0x00	; 0
 470:	50 e0       	ldi	r21, 0x00	; 0
 472:	6f ef       	ldi	r22, 0xFF	; 255
 474:	70 e0       	ldi	r23, 0x00	; 0
 476:	8c 2f       	mov	r24, r28
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	81 d0       	rcall	.+258    	; 0x57e <setColor_RGB>
					show();
 47c:	ee d0       	rcall	.+476    	; 0x65a <show>
 47e:	9f ef       	ldi	r25, 0xFF	; 255
 480:	21 ee       	ldi	r18, 0xE1	; 225
 482:	84 e0       	ldi	r24, 0x04	; 4
 484:	91 50       	subi	r25, 0x01	; 1
 486:	20 40       	sbci	r18, 0x00	; 0
 488:	80 40       	sbci	r24, 0x00	; 0
 48a:	e1 f7       	brne	.-8      	; 0x484 <__FUSE_REGION_LENGTH__+0x84>
 48c:	00 c0       	rjmp	.+0      	; 0x48e <__FUSE_REGION_LENGTH__+0x8e>
 48e:	00 00       	nop
 490:	c8 50       	subi	r28, 0x08	; 8
			clear();
		}
		else if((g_unAdcValue>30)&&(g_unAdcValue<=100))
			{
			
				for(int i = 7; i >= 0; i--)
 492:	c8 3f       	cpi	r28, 0xF8	; 248
 494:	61 f7       	brne	.-40     	; 0x46e <__FUSE_REGION_LENGTH__+0x6e>
 496:	9f ef       	ldi	r25, 0xFF	; 255
 498:	29 e6       	ldi	r18, 0x69	; 105
 49a:	88 e1       	ldi	r24, 0x18	; 24
 49c:	91 50       	subi	r25, 0x01	; 1
 49e:	20 40       	sbci	r18, 0x00	; 0
 4a0:	80 40       	sbci	r24, 0x00	; 0
 4a2:	e1 f7       	brne	.-8      	; 0x49c <__FUSE_REGION_LENGTH__+0x9c>
 4a4:	00 c0       	rjmp	.+0      	; 0x4a6 <__FUSE_REGION_LENGTH__+0xa6>
 4a6:	00 00       	nop
					setColor_RGB(0 + line, 0xFF0000);			// RED
					show();
					_delay_ms(100);
				}
				_delay_ms(500);
				clear();
 4a8:	ad d1       	rcall	.+858    	; 0x804 <clear>
 4aa:	55 ce       	rjmp	.-854    	; 0x156 <main+0x1e>
			}
		else if((g_unAdcValue>=0)&&(g_unAdcValue<=30))
 4ac:	4f 97       	sbiw	r24, 0x1f	; 31
 4ae:	10 f4       	brcc	.+4      	; 0x4b4 <__FUSE_REGION_LENGTH__+0xb4>
		{
			clear();
 4b0:	a9 d1       	rcall	.+850    	; 0x804 <clear>
 4b2:	51 ce       	rjmp	.-862    	; 0x156 <main+0x1e>
 4b4:	18 e3       	ldi	r17, 0x38	; 56
		else
		{
			for(int i = 7; i >= 0; i--)
			{
				line = i * 8;
				setColor_RGB(0 + line, 0xFF0000);			// RED
 4b6:	c1 2f       	mov	r28, r17
 4b8:	d0 e0       	ldi	r29, 0x00	; 0
 4ba:	40 e0       	ldi	r20, 0x00	; 0
 4bc:	50 e0       	ldi	r21, 0x00	; 0
 4be:	6f ef       	ldi	r22, 0xFF	; 255
 4c0:	70 e0       	ldi	r23, 0x00	; 0
 4c2:	ce 01       	movw	r24, r28
 4c4:	5c d0       	rcall	.+184    	; 0x57e <setColor_RGB>
				setColor_RGB(1 + line, 0xFF5E00);			// Orange
 4c6:	40 e0       	ldi	r20, 0x00	; 0
 4c8:	5e e5       	ldi	r21, 0x5E	; 94
 4ca:	6f ef       	ldi	r22, 0xFF	; 255
 4cc:	70 e0       	ldi	r23, 0x00	; 0
 4ce:	ce 01       	movw	r24, r28
 4d0:	01 96       	adiw	r24, 0x01	; 1
 4d2:	55 d0       	rcall	.+170    	; 0x57e <setColor_RGB>
				setColor_RGB(2 + line, 0xFFE400);			// Yellow
 4d4:	40 e0       	ldi	r20, 0x00	; 0
 4d6:	54 ee       	ldi	r21, 0xE4	; 228
 4d8:	6f ef       	ldi	r22, 0xFF	; 255
 4da:	70 e0       	ldi	r23, 0x00	; 0
 4dc:	ce 01       	movw	r24, r28
 4de:	02 96       	adiw	r24, 0x02	; 2
 4e0:	4e d0       	rcall	.+156    	; 0x57e <setColor_RGB>
				setColor_RGB(3 + line, 0x1DDB16);			// Green
 4e2:	46 e1       	ldi	r20, 0x16	; 22
 4e4:	5b ed       	ldi	r21, 0xDB	; 219
 4e6:	6d e1       	ldi	r22, 0x1D	; 29
 4e8:	70 e0       	ldi	r23, 0x00	; 0
 4ea:	ce 01       	movw	r24, r28
 4ec:	03 96       	adiw	r24, 0x03	; 3
 4ee:	47 d0       	rcall	.+142    	; 0x57e <setColor_RGB>
				setColor_RGB(4 + line, 0x0000FF);			// Blue
 4f0:	4f ef       	ldi	r20, 0xFF	; 255
 4f2:	50 e0       	ldi	r21, 0x00	; 0
 4f4:	60 e0       	ldi	r22, 0x00	; 0
 4f6:	70 e0       	ldi	r23, 0x00	; 0
 4f8:	ce 01       	movw	r24, r28
 4fa:	04 96       	adiw	r24, 0x04	; 4
 4fc:	40 d0       	rcall	.+128    	; 0x57e <setColor_RGB>
				setColor_RGB(5 + line, 0x0100FF);			// Dark Blue
 4fe:	4f ef       	ldi	r20, 0xFF	; 255
 500:	50 e0       	ldi	r21, 0x00	; 0
 502:	61 e0       	ldi	r22, 0x01	; 1
 504:	70 e0       	ldi	r23, 0x00	; 0
 506:	ce 01       	movw	r24, r28
 508:	05 96       	adiw	r24, 0x05	; 5
 50a:	39 d0       	rcall	.+114    	; 0x57e <setColor_RGB>
				setColor_RGB(6 + line, 0x3F0099);			// Purple
 50c:	49 e9       	ldi	r20, 0x99	; 153
 50e:	50 e0       	ldi	r21, 0x00	; 0
 510:	6f e3       	ldi	r22, 0x3F	; 63
 512:	70 e0       	ldi	r23, 0x00	; 0
 514:	ce 01       	movw	r24, r28
 516:	06 96       	adiw	r24, 0x06	; 6
 518:	32 d0       	rcall	.+100    	; 0x57e <setColor_RGB>
				setColor_RGB(7 + line, 0xFF00DD);			// Pink
 51a:	4d ed       	ldi	r20, 0xDD	; 221
 51c:	50 e0       	ldi	r21, 0x00	; 0
 51e:	6f ef       	ldi	r22, 0xFF	; 255
 520:	70 e0       	ldi	r23, 0x00	; 0
 522:	ce 01       	movw	r24, r28
 524:	07 96       	adiw	r24, 0x07	; 7
 526:	2b d0       	rcall	.+86     	; 0x57e <setColor_RGB>
				show();
 528:	98 d0       	rcall	.+304    	; 0x65a <show>
 52a:	9f ef       	ldi	r25, 0xFF	; 255
 52c:	21 ee       	ldi	r18, 0xE1	; 225
 52e:	84 e0       	ldi	r24, 0x04	; 4
 530:	91 50       	subi	r25, 0x01	; 1
 532:	20 40       	sbci	r18, 0x00	; 0
 534:	80 40       	sbci	r24, 0x00	; 0
 536:	e1 f7       	brne	.-8      	; 0x530 <__FUSE_REGION_LENGTH__+0x130>
 538:	00 c0       	rjmp	.+0      	; 0x53a <__FUSE_REGION_LENGTH__+0x13a>
 53a:	00 00       	nop
 53c:	18 50       	subi	r17, 0x08	; 8
		{
			clear();
		}	
		else
		{
			for(int i = 7; i >= 0; i--)
 53e:	18 3f       	cpi	r17, 0xF8	; 248
 540:	09 f0       	breq	.+2      	; 0x544 <__FUSE_REGION_LENGTH__+0x144>
 542:	b9 cf       	rjmp	.-142    	; 0x4b6 <__FUSE_REGION_LENGTH__+0xb6>
 544:	9f ef       	ldi	r25, 0xFF	; 255
 546:	29 e6       	ldi	r18, 0x69	; 105
 548:	88 e1       	ldi	r24, 0x18	; 24
 54a:	91 50       	subi	r25, 0x01	; 1
 54c:	20 40       	sbci	r18, 0x00	; 0
 54e:	80 40       	sbci	r24, 0x00	; 0
 550:	e1 f7       	brne	.-8      	; 0x54a <__FUSE_REGION_LENGTH__+0x14a>
 552:	00 c0       	rjmp	.+0      	; 0x554 <__FUSE_REGION_LENGTH__+0x154>
 554:	00 00       	nop
				setColor_RGB(7 + line, 0xFF00DD);			// Pink
				show();
				_delay_ms(100);
			}
			_delay_ms(500);
			clear();
 556:	56 d1       	rcall	.+684    	; 0x804 <clear>
 558:	fe cd       	rjmp	.-1028   	; 0x156 <main+0x1e>

0000055a <setPin>:


void cell_clear(uint16_t nCell)
{
	setColor(nCell, 0, 0, 0);
	show();
 55a:	e8 2f       	mov	r30, r24
 55c:	f0 e0       	ldi	r31, 0x00	; 0
 55e:	df 01       	movw	r26, r30
 560:	8e 91       	ld	r24, -X
 562:	21 e0       	ldi	r18, 0x01	; 1
 564:	30 e0       	ldi	r19, 0x00	; 0
 566:	02 c0       	rjmp	.+4      	; 0x56c <setPin+0x12>
 568:	22 0f       	add	r18, r18
 56a:	33 1f       	adc	r19, r19
 56c:	6a 95       	dec	r22
 56e:	e2 f7       	brpl	.-8      	; 0x568 <setPin+0xe>
 570:	82 2b       	or	r24, r18
 572:	8c 93       	st	X, r24
 574:	80 81       	ld	r24, Z
 576:	20 95       	com	r18
 578:	28 23       	and	r18, r24
 57a:	20 83       	st	Z, r18
 57c:	08 95       	ret

0000057e <setColor_RGB>:
 57e:	8f 92       	push	r8
 580:	9f 92       	push	r9
 582:	af 92       	push	r10
 584:	bf 92       	push	r11
 586:	cf 92       	push	r12
 588:	df 92       	push	r13
 58a:	ef 92       	push	r14
 58c:	ff 92       	push	r15
 58e:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <nCells>
 592:	30 91 10 01 	lds	r19, 0x0110	; 0x800110 <nCells+0x1>
 596:	82 17       	cp	r24, r18
 598:	93 07       	cpc	r25, r19
 59a:	08 f0       	brcs	.+2      	; 0x59e <setColor_RGB+0x20>
 59c:	55 c0       	rjmp	.+170    	; 0x648 <setColor_RGB+0xca>
 59e:	6b 01       	movw	r12, r22
 5a0:	ee 24       	eor	r14, r14
 5a2:	ff 24       	eor	r15, r15
 5a4:	ac 2d       	mov	r26, r12
 5a6:	85 2e       	mov	r8, r21
 5a8:	96 2e       	mov	r9, r22
 5aa:	a7 2e       	mov	r10, r23
 5ac:	bb 24       	eor	r11, r11
 5ae:	b8 2d       	mov	r27, r8
 5b0:	24 2f       	mov	r18, r20
 5b2:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <brightness>
 5b6:	3f 3f       	cpi	r19, 0xFF	; 255
 5b8:	c9 f1       	breq	.+114    	; 0x62c <setColor_RGB+0xae>
 5ba:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <brightness>
 5be:	22 30       	cpi	r18, 0x02	; 2
 5c0:	80 f1       	brcs	.+96     	; 0x622 <setColor_RGB+0xa4>
 5c2:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <brightness>
 5c6:	30 e0       	ldi	r19, 0x00	; 0
 5c8:	2f 5f       	subi	r18, 0xFF	; 255
 5ca:	3f 4f       	sbci	r19, 0xFF	; 255
 5cc:	a8 2d       	mov	r26, r8
 5ce:	a1 60       	ori	r26, 0x01	; 1
 5d0:	a2 9f       	mul	r26, r18
 5d2:	f0 01       	movw	r30, r0
 5d4:	a3 9f       	mul	r26, r19
 5d6:	f0 0d       	add	r31, r0
 5d8:	11 24       	eor	r1, r1
 5da:	e1 38       	cpi	r30, 0x81	; 129
 5dc:	f1 05       	cpc	r31, r1
 5de:	20 f0       	brcs	.+8      	; 0x5e8 <setColor_RGB+0x6a>
 5e0:	e0 58       	subi	r30, 0x80	; 128
 5e2:	f1 09       	sbc	r31, r1
 5e4:	bf 2f       	mov	r27, r31
 5e6:	01 c0       	rjmp	.+2      	; 0x5ea <setColor_RGB+0x6c>
 5e8:	b0 e0       	ldi	r27, 0x00	; 0
 5ea:	ac 2d       	mov	r26, r12
 5ec:	a1 60       	ori	r26, 0x01	; 1
 5ee:	a2 9f       	mul	r26, r18
 5f0:	f0 01       	movw	r30, r0
 5f2:	a3 9f       	mul	r26, r19
 5f4:	f0 0d       	add	r31, r0
 5f6:	11 24       	eor	r1, r1
 5f8:	e1 38       	cpi	r30, 0x81	; 129
 5fa:	f1 05       	cpc	r31, r1
 5fc:	20 f0       	brcs	.+8      	; 0x606 <setColor_RGB+0x88>
 5fe:	e0 58       	subi	r30, 0x80	; 128
 600:	f1 09       	sbc	r31, r1
 602:	af 2f       	mov	r26, r31
 604:	01 c0       	rjmp	.+2      	; 0x608 <setColor_RGB+0x8a>
 606:	a0 e0       	ldi	r26, 0x00	; 0
 608:	41 60       	ori	r20, 0x01	; 1
 60a:	42 9f       	mul	r20, r18
 60c:	b0 01       	movw	r22, r0
 60e:	43 9f       	mul	r20, r19
 610:	70 0d       	add	r23, r0
 612:	11 24       	eor	r1, r1
 614:	61 38       	cpi	r22, 0x81	; 129
 616:	71 05       	cpc	r23, r1
 618:	40 f0       	brcs	.+16     	; 0x62a <setColor_RGB+0xac>
 61a:	60 58       	subi	r22, 0x80	; 128
 61c:	71 09       	sbc	r23, r1
 61e:	27 2f       	mov	r18, r23
 620:	05 c0       	rjmp	.+10     	; 0x62c <setColor_RGB+0xae>
 622:	20 e0       	ldi	r18, 0x00	; 0
 624:	b0 e0       	ldi	r27, 0x00	; 0
 626:	a0 e0       	ldi	r26, 0x00	; 0
 628:	01 c0       	rjmp	.+2      	; 0x62c <setColor_RGB+0xae>
 62a:	20 e0       	ldi	r18, 0x00	; 0
 62c:	fc 01       	movw	r30, r24
 62e:	ee 0f       	add	r30, r30
 630:	ff 1f       	adc	r31, r31
 632:	8e 0f       	add	r24, r30
 634:	9f 1f       	adc	r25, r31
 636:	e0 91 13 01 	lds	r30, 0x0113	; 0x800113 <cells>
 63a:	f0 91 14 01 	lds	r31, 0x0114	; 0x800114 <cells+0x1>
 63e:	e8 0f       	add	r30, r24
 640:	f9 1f       	adc	r31, r25
 642:	b0 83       	st	Z, r27
 644:	a1 83       	std	Z+1, r26	; 0x01
 646:	22 83       	std	Z+2, r18	; 0x02
 648:	ff 90       	pop	r15
 64a:	ef 90       	pop	r14
 64c:	df 90       	pop	r13
 64e:	cf 90       	pop	r12
 650:	bf 90       	pop	r11
 652:	af 90       	pop	r10
 654:	9f 90       	pop	r9
 656:	8f 90       	pop	r8
 658:	08 95       	ret

0000065a <show>:
 65a:	cf 93       	push	r28
 65c:	df 93       	push	r29
 65e:	cd b7       	in	r28, 0x3d	; 61
 660:	de b7       	in	r29, 0x3e	; 62
 662:	27 97       	sbiw	r28, 0x07	; 7
 664:	0f b6       	in	r0, 0x3f	; 63
 666:	f8 94       	cli
 668:	de bf       	out	0x3e, r29	; 62
 66a:	0f be       	out	0x3f, r0	; 63
 66c:	cd bf       	out	0x3d, r28	; 61
 66e:	87 ec       	ldi	r24, 0xC7	; 199
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	01 97       	sbiw	r24, 0x01	; 1
 674:	f1 f7       	brne	.-4      	; 0x672 <show+0x18>
 676:	00 c0       	rjmp	.+0      	; 0x678 <show+0x1e>
 678:	00 00       	nop
 67a:	f8 94       	cli
 67c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <nBytes>
 680:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <nBytes+0x1>
 684:	9a 83       	std	Y+2, r25	; 0x02
 686:	89 83       	std	Y+1, r24	; 0x01
 688:	e0 91 13 01 	lds	r30, 0x0113	; 0x800113 <cells>
 68c:	f0 91 14 01 	lds	r31, 0x0114	; 0x800114 <cells+0x1>
 690:	df 01       	movw	r26, r30
 692:	11 96       	adiw	r26, 0x01	; 1
 694:	80 81       	ld	r24, Z
 696:	8b 83       	std	Y+3, r24	; 0x03
 698:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <port>
 69c:	f0 91 12 01 	lds	r31, 0x0112	; 0x800112 <port+0x1>
 6a0:	90 81       	ld	r25, Z
 6a2:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <maskPin>
 6a6:	89 2b       	or	r24, r25
 6a8:	8e 83       	std	Y+6, r24	; 0x06
 6aa:	90 81       	ld	r25, Z
 6ac:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <maskPin>
 6b0:	80 95       	com	r24
 6b2:	89 23       	and	r24, r25
 6b4:	8f 83       	std	Y+7, r24	; 0x07
 6b6:	8f 81       	ldd	r24, Y+7	; 0x07
 6b8:	8c 83       	std	Y+4, r24	; 0x04
 6ba:	88 e0       	ldi	r24, 0x08	; 8
 6bc:	8d 83       	std	Y+5, r24	; 0x05
 6be:	5e 81       	ldd	r21, Y+6	; 0x06
 6c0:	6f 81       	ldd	r22, Y+7	; 0x07
 6c2:	4b 81       	ldd	r20, Y+3	; 0x03
 6c4:	3d 81       	ldd	r19, Y+5	; 0x05
 6c6:	2c 81       	ldd	r18, Y+4	; 0x04
 6c8:	89 81       	ldd	r24, Y+1	; 0x01
 6ca:	9a 81       	ldd	r25, Y+2	; 0x02

000006cc <run>:
 6cc:	50 83       	st	Z, r21
 6ce:	47 fd       	sbrc	r20, 7
 6d0:	25 2f       	mov	r18, r21
 6d2:	20 83       	st	Z, r18
 6d4:	26 2f       	mov	r18, r22
 6d6:	3a 95       	dec	r19
 6d8:	39 f0       	breq	.+14     	; 0x6e8 <nextByte>
 6da:	44 0f       	add	r20, r20
 6dc:	00 c0       	rjmp	.+0      	; 0x6de <run+0x12>
 6de:	00 00       	nop
 6e0:	60 83       	st	Z, r22
 6e2:	00 c0       	rjmp	.+0      	; 0x6e4 <run+0x18>
 6e4:	00 00       	nop
 6e6:	f2 cf       	rjmp	.-28     	; 0x6cc <run>

000006e8 <nextByte>:
 6e8:	4d 91       	ld	r20, X+
 6ea:	60 83       	st	Z, r22
 6ec:	38 e0       	ldi	r19, 0x08	; 8
 6ee:	00 00       	nop
 6f0:	01 97       	sbiw	r24, 0x01	; 1
 6f2:	61 f7       	brne	.-40     	; 0x6cc <run>
 6f4:	f0 93 12 01 	sts	0x0112, r31	; 0x800112 <port+0x1>
 6f8:	e0 93 11 01 	sts	0x0111, r30	; 0x800111 <port>
 6fc:	4b 83       	std	Y+3, r20	; 0x03
 6fe:	3d 83       	std	Y+5, r19	; 0x05
 700:	2c 83       	std	Y+4, r18	; 0x04
 702:	9a 83       	std	Y+2, r25	; 0x02
 704:	89 83       	std	Y+1, r24	; 0x01
 706:	78 94       	sei
 708:	87 ec       	ldi	r24, 0xC7	; 199
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	01 97       	sbiw	r24, 0x01	; 1
 70e:	f1 f7       	brne	.-4      	; 0x70c <nextByte+0x24>
 710:	00 c0       	rjmp	.+0      	; 0x712 <nextByte+0x2a>
 712:	00 00       	nop
 714:	27 96       	adiw	r28, 0x07	; 7
 716:	0f b6       	in	r0, 0x3f	; 63
 718:	f8 94       	cli
 71a:	de bf       	out	0x3e, r29	; 62
 71c:	0f be       	out	0x3f, r0	; 63
 71e:	cd bf       	out	0x3d, r28	; 61
 720:	df 91       	pop	r29
 722:	cf 91       	pop	r28
 724:	08 95       	ret

00000726 <NS_Rainbow_init>:
 726:	ff 92       	push	r15
 728:	0f 93       	push	r16
 72a:	1f 93       	push	r17
 72c:	cf 93       	push	r28
 72e:	df 93       	push	r29
 730:	1f 92       	push	r1
 732:	cd b7       	in	r28, 0x3d	; 61
 734:	de b7       	in	r29, 0x3e	; 62
 736:	8c 01       	movw	r16, r24
 738:	69 83       	std	Y+1, r22	; 0x01
 73a:	f4 2e       	mov	r15, r20
 73c:	89 81       	ldd	r24, Y+1	; 0x01
 73e:	64 2f       	mov	r22, r20
 740:	0c df       	rcall	.-488    	; 0x55a <setPin>
 742:	89 81       	ldd	r24, Y+1	; 0x01
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <port+0x1>
 74a:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <port>
 74e:	81 e0       	ldi	r24, 0x01	; 1
 750:	90 e0       	ldi	r25, 0x00	; 0
 752:	02 c0       	rjmp	.+4      	; 0x758 <NS_Rainbow_init+0x32>
 754:	88 0f       	add	r24, r24
 756:	99 1f       	adc	r25, r25
 758:	fa 94       	dec	r15
 75a:	e2 f7       	brpl	.-8      	; 0x754 <NS_Rainbow_init+0x2e>
 75c:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <maskPin>
 760:	10 93 10 01 	sts	0x0110, r17	; 0x800110 <nCells+0x1>
 764:	00 93 0f 01 	sts	0x010F, r16	; 0x80010f <nCells>
 768:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <maxLEDBytes>
 76c:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <maxLEDBytes+0x1>
 770:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <nBytes+0x1>
 774:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <nBytes>
 778:	8f ef       	ldi	r24, 0xFF	; 255
 77a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <brightness>
 77e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <nBytes>
 782:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <nBytes+0x1>
 786:	65 d1       	rcall	.+714    	; 0xa52 <malloc>
 788:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <cells+0x1>
 78c:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <cells>
 790:	00 97       	sbiw	r24, 0x00	; 0
 792:	39 f0       	breq	.+14     	; 0x7a2 <NS_Rainbow_init+0x7c>
 794:	40 91 0d 01 	lds	r20, 0x010D	; 0x80010d <nBytes>
 798:	50 91 0e 01 	lds	r21, 0x010E	; 0x80010e <nBytes+0x1>
 79c:	60 e0       	ldi	r22, 0x00	; 0
 79e:	70 e0       	ldi	r23, 0x00	; 0
 7a0:	85 d2       	rcall	.+1290   	; 0xcac <memset>
 7a2:	5b df       	rcall	.-330    	; 0x65a <show>
 7a4:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <cells>
 7a8:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <cells+0x1>
 7ac:	e7 d1       	rcall	.+974    	; 0xb7c <free>
 7ae:	2f ef       	ldi	r18, 0xFF	; 255
 7b0:	80 e7       	ldi	r24, 0x70	; 112
 7b2:	92 e0       	ldi	r25, 0x02	; 2
 7b4:	21 50       	subi	r18, 0x01	; 1
 7b6:	80 40       	sbci	r24, 0x00	; 0
 7b8:	90 40       	sbci	r25, 0x00	; 0
 7ba:	e1 f7       	brne	.-8      	; 0x7b4 <NS_Rainbow_init+0x8e>
 7bc:	00 c0       	rjmp	.+0      	; 0x7be <NS_Rainbow_init+0x98>
 7be:	00 00       	nop
 7c0:	c8 01       	movw	r24, r16
 7c2:	88 0f       	add	r24, r24
 7c4:	99 1f       	adc	r25, r25
 7c6:	08 0f       	add	r16, r24
 7c8:	19 1f       	adc	r17, r25
 7ca:	10 93 0e 01 	sts	0x010E, r17	; 0x80010e <nBytes+0x1>
 7ce:	00 93 0d 01 	sts	0x010D, r16	; 0x80010d <nBytes>
 7d2:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <nBytes>
 7d6:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <nBytes+0x1>
 7da:	3b d1       	rcall	.+630    	; 0xa52 <malloc>
 7dc:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <cells+0x1>
 7e0:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <cells>
 7e4:	00 97       	sbiw	r24, 0x00	; 0
 7e6:	39 f0       	breq	.+14     	; 0x7f6 <NS_Rainbow_init+0xd0>
 7e8:	40 91 0d 01 	lds	r20, 0x010D	; 0x80010d <nBytes>
 7ec:	50 91 0e 01 	lds	r21, 0x010E	; 0x80010e <nBytes+0x1>
 7f0:	60 e0       	ldi	r22, 0x00	; 0
 7f2:	70 e0       	ldi	r23, 0x00	; 0
 7f4:	5b d2       	rcall	.+1206   	; 0xcac <memset>
 7f6:	0f 90       	pop	r0
 7f8:	df 91       	pop	r29
 7fa:	cf 91       	pop	r28
 7fc:	1f 91       	pop	r17
 7fe:	0f 91       	pop	r16
 800:	ff 90       	pop	r15
 802:	08 95       	ret

00000804 <clear>:
 804:	40 91 0d 01 	lds	r20, 0x010D	; 0x80010d <nBytes>
 808:	50 91 0e 01 	lds	r21, 0x010E	; 0x80010e <nBytes+0x1>
 80c:	60 e0       	ldi	r22, 0x00	; 0
 80e:	70 e0       	ldi	r23, 0x00	; 0
 810:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <cells>
 814:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <cells+0x1>
 818:	49 d2       	rcall	.+1170   	; 0xcac <memset>
 81a:	1f cf       	rjmp	.-450    	; 0x65a <show>
 81c:	08 95       	ret

0000081e <setBrightness>:
}



void setBrightness(uint8_t b)
{
 81e:	4f 92       	push	r4
 820:	5f 92       	push	r5
 822:	6f 92       	push	r6
 824:	7f 92       	push	r7
 826:	8f 92       	push	r8
 828:	9f 92       	push	r9
 82a:	af 92       	push	r10
 82c:	bf 92       	push	r11
 82e:	df 92       	push	r13
 830:	ef 92       	push	r14
 832:	ff 92       	push	r15
 834:	0f 93       	push	r16
 836:	1f 93       	push	r17
 838:	cf 93       	push	r28
 83a:	df 93       	push	r29
 83c:	d8 2e       	mov	r13, r24
	if( b != brightness )
 83e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <brightness>
 842:	d8 16       	cp	r13, r24
 844:	09 f4       	brne	.+2      	; 0x848 <setBrightness+0x2a>
 846:	b4 c0       	rjmp	.+360    	; 0x9b0 <setBrightness+0x192>
	{
		uint8_t *ptr = cells;
 848:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <cells>
 84c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <cells+0x1>
		uint16_t nb = b + 1, cb = brightness + 1;
 850:	80 90 06 01 	lds	r8, 0x0106	; 0x800106 <brightness>
 854:	91 2c       	mov	r9, r1
 856:	2f ef       	ldi	r18, 0xFF	; 255
 858:	82 1a       	sub	r8, r18
 85a:	92 0a       	sbc	r9, r18
	
		if (b < 1)
 85c:	d1 10       	cpse	r13, r1
 85e:	35 c0       	rjmp	.+106    	; 0x8ca <setBrightness+0xac>
		{
			for(uint16_t i = 0; i < nBytes; i++)
 860:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <nBytes>
 864:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <nBytes+0x1>
 868:	23 2b       	or	r18, r19
 86a:	09 f4       	brne	.+2      	; 0x86e <setBrightness+0x50>
 86c:	9f c0       	rjmp	.+318    	; 0x9ac <setBrightness+0x18e>
 86e:	c9 2f       	mov	r28, r25
 870:	d8 2f       	mov	r29, r24
 872:	e9 2e       	mov	r14, r25
 874:	f8 2e       	mov	r15, r24
 876:	00 e0       	ldi	r16, 0x00	; 0
 878:	10 e0       	ldi	r17, 0x00	; 0
				(*ptr > 0) ? (*ptr++ = (((uint32_t)(*ptr + 1) << 16) / cb - 0x80) >> 8) : (*ptr++ = 0);
 87a:	a1 2c       	mov	r10, r1
 87c:	b1 2c       	mov	r11, r1
 87e:	f7 01       	movw	r30, r14
 880:	81 91       	ld	r24, Z+
 882:	7f 01       	movw	r14, r30
 884:	88 23       	and	r24, r24
 886:	a9 f0       	breq	.+42     	; 0x8b2 <setBrightness+0x94>
 888:	60 81       	ld	r22, Z
 88a:	70 e0       	ldi	r23, 0x00	; 0
 88c:	6f 5f       	subi	r22, 0xFF	; 255
 88e:	7f 4f       	sbci	r23, 0xFF	; 255
 890:	cb 01       	movw	r24, r22
 892:	77 0f       	add	r23, r23
 894:	aa 0b       	sbc	r26, r26
 896:	bb 0b       	sbc	r27, r27
 898:	77 27       	eor	r23, r23
 89a:	66 27       	eor	r22, r22
 89c:	a5 01       	movw	r20, r10
 89e:	94 01       	movw	r18, r8
 8a0:	97 d0       	rcall	.+302    	; 0x9d0 <__udivmodsi4>
 8a2:	da 01       	movw	r26, r20
 8a4:	c9 01       	movw	r24, r18
 8a6:	80 58       	subi	r24, 0x80	; 128
 8a8:	91 09       	sbc	r25, r1
 8aa:	a1 09       	sbc	r26, r1
 8ac:	b1 09       	sbc	r27, r1
 8ae:	98 83       	st	Y, r25
 8b0:	01 c0       	rjmp	.+2      	; 0x8b4 <setBrightness+0x96>
 8b2:	18 82       	st	Y, r1
		uint8_t *ptr = cells;
		uint16_t nb = b + 1, cb = brightness + 1;
	
		if (b < 1)
		{
			for(uint16_t i = 0; i < nBytes; i++)
 8b4:	0f 5f       	subi	r16, 0xFF	; 255
 8b6:	1f 4f       	sbci	r17, 0xFF	; 255
 8b8:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <nBytes>
 8bc:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <nBytes+0x1>
 8c0:	21 96       	adiw	r28, 0x01	; 1
 8c2:	08 17       	cp	r16, r24
 8c4:	19 07       	cpc	r17, r25
 8c6:	d8 f2       	brcs	.-74     	; 0x87e <setBrightness+0x60>
 8c8:	71 c0       	rjmp	.+226    	; 0x9ac <setBrightness+0x18e>
				(*ptr > 0) ? (*ptr++ = (((uint32_t)(*ptr + 1) << 16) / cb - 0x80) >> 8) : (*ptr++ = 0);
		}
		else if (b > 0xFE)
 8ca:	ff ef       	ldi	r31, 0xFF	; 255
 8cc:	df 16       	cp	r13, r31
 8ce:	39 f0       	breq	.+14     	; 0x8de <setBrightness+0xc0>
			for (uint16_t i = 0; i < nBytes; i++)
				(*ptr > 0) ? (*ptr++ = (((uint32_t)(*ptr + 1) << 16) / cb - 0x80) >> 8) : (*ptr++ = 0);
		}
		else
		{
			for (uint16_t i = 0; i < nBytes; i++)
 8d0:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <nBytes>
 8d4:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <nBytes+0x1>
 8d8:	23 2b       	or	r18, r19
 8da:	b1 f5       	brne	.+108    	; 0x948 <setBrightness+0x12a>
 8dc:	67 c0       	rjmp	.+206    	; 0x9ac <setBrightness+0x18e>
			for(uint16_t i = 0; i < nBytes; i++)
				(*ptr > 0) ? (*ptr++ = (((uint32_t)(*ptr + 1) << 16) / cb - 0x80) >> 8) : (*ptr++ = 0);
		}
		else if (b > 0xFE)
		{
			for (uint16_t i = 0; i < nBytes; i++)
 8de:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <nBytes>
 8e2:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <nBytes+0x1>
 8e6:	23 2b       	or	r18, r19
 8e8:	09 f4       	brne	.+2      	; 0x8ec <setBrightness+0xce>
 8ea:	60 c0       	rjmp	.+192    	; 0x9ac <setBrightness+0x18e>
 8ec:	e9 2e       	mov	r14, r25
 8ee:	f8 2e       	mov	r15, r24
 8f0:	c9 2f       	mov	r28, r25
 8f2:	d8 2f       	mov	r29, r24
 8f4:	00 e0       	ldi	r16, 0x00	; 0
 8f6:	10 e0       	ldi	r17, 0x00	; 0
				(*ptr > 0) ? (*ptr++ = (((uint32_t)(*ptr + 1) << 16) / cb - 0x80) >> 8) : (*ptr++ = 0);
 8f8:	a1 2c       	mov	r10, r1
 8fa:	b1 2c       	mov	r11, r1
 8fc:	f7 01       	movw	r30, r14
 8fe:	81 91       	ld	r24, Z+
 900:	7f 01       	movw	r14, r30
 902:	88 23       	and	r24, r24
 904:	a9 f0       	breq	.+42     	; 0x930 <setBrightness+0x112>
 906:	60 81       	ld	r22, Z
 908:	70 e0       	ldi	r23, 0x00	; 0
 90a:	6f 5f       	subi	r22, 0xFF	; 255
 90c:	7f 4f       	sbci	r23, 0xFF	; 255
 90e:	cb 01       	movw	r24, r22
 910:	77 0f       	add	r23, r23
 912:	aa 0b       	sbc	r26, r26
 914:	bb 0b       	sbc	r27, r27
 916:	77 27       	eor	r23, r23
 918:	66 27       	eor	r22, r22
 91a:	a5 01       	movw	r20, r10
 91c:	94 01       	movw	r18, r8
 91e:	58 d0       	rcall	.+176    	; 0x9d0 <__udivmodsi4>
 920:	da 01       	movw	r26, r20
 922:	c9 01       	movw	r24, r18
 924:	80 58       	subi	r24, 0x80	; 128
 926:	91 09       	sbc	r25, r1
 928:	a1 09       	sbc	r26, r1
 92a:	b1 09       	sbc	r27, r1
 92c:	98 83       	st	Y, r25
 92e:	01 c0       	rjmp	.+2      	; 0x932 <setBrightness+0x114>
 930:	18 82       	st	Y, r1
			for(uint16_t i = 0; i < nBytes; i++)
				(*ptr > 0) ? (*ptr++ = (((uint32_t)(*ptr + 1) << 16) / cb - 0x80) >> 8) : (*ptr++ = 0);
		}
		else if (b > 0xFE)
		{
			for (uint16_t i = 0; i < nBytes; i++)
 932:	0f 5f       	subi	r16, 0xFF	; 255
 934:	1f 4f       	sbci	r17, 0xFF	; 255
 936:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <nBytes>
 93a:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <nBytes+0x1>
 93e:	21 96       	adiw	r28, 0x01	; 1
 940:	08 17       	cp	r16, r24
 942:	19 07       	cpc	r17, r25
 944:	d8 f2       	brcs	.-74     	; 0x8fc <setBrightness+0xde>
 946:	32 c0       	rjmp	.+100    	; 0x9ac <setBrightness+0x18e>
void setBrightness(uint8_t b)
{
	if( b != brightness )
	{
		uint8_t *ptr = cells;
		uint16_t nb = b + 1, cb = brightness + 1;
 948:	4d 2c       	mov	r4, r13
 94a:	51 2c       	mov	r5, r1
 94c:	ff ef       	ldi	r31, 0xFF	; 255
 94e:	4f 1a       	sub	r4, r31
 950:	5f 0a       	sbc	r5, r31
				(*ptr > 0) ? (*ptr++ = (((uint32_t)(*ptr + 1) << 16) / cb - 0x80) >> 8) : (*ptr++ = 0);
		}
		else
		{
			for (uint16_t i = 0; i < nBytes; i++)
				(*ptr > 0) ? (*ptr++ = ((uint32_t)(*ptr + 1) * (nb << 8) / cb - 0x80) >> 8) : (*ptr++ = 0);
 952:	54 2c       	mov	r5, r4
 954:	44 24       	eor	r4, r4
 956:	61 2c       	mov	r6, r1
 958:	71 2c       	mov	r7, r1
 95a:	e9 2e       	mov	r14, r25
 95c:	f8 2e       	mov	r15, r24
 95e:	c9 2f       	mov	r28, r25
 960:	d8 2f       	mov	r29, r24
 962:	00 e0       	ldi	r16, 0x00	; 0
 964:	10 e0       	ldi	r17, 0x00	; 0
 966:	a1 2c       	mov	r10, r1
 968:	b1 2c       	mov	r11, r1
 96a:	f7 01       	movw	r30, r14
 96c:	81 91       	ld	r24, Z+
 96e:	7f 01       	movw	r14, r30
 970:	88 23       	and	r24, r24
 972:	89 f0       	breq	.+34     	; 0x996 <setBrightness+0x178>
 974:	a0 81       	ld	r26, Z
 976:	b0 e0       	ldi	r27, 0x00	; 0
 978:	11 96       	adiw	r26, 0x01	; 1
 97a:	a3 01       	movw	r20, r6
 97c:	92 01       	movw	r18, r4
 97e:	59 d0       	rcall	.+178    	; 0xa32 <__mulshisi3>
 980:	a5 01       	movw	r20, r10
 982:	94 01       	movw	r18, r8
 984:	25 d0       	rcall	.+74     	; 0x9d0 <__udivmodsi4>
 986:	da 01       	movw	r26, r20
 988:	c9 01       	movw	r24, r18
 98a:	80 58       	subi	r24, 0x80	; 128
 98c:	91 09       	sbc	r25, r1
 98e:	a1 09       	sbc	r26, r1
 990:	b1 09       	sbc	r27, r1
 992:	98 83       	st	Y, r25
 994:	01 c0       	rjmp	.+2      	; 0x998 <setBrightness+0x17a>
 996:	18 82       	st	Y, r1
			for (uint16_t i = 0; i < nBytes; i++)
				(*ptr > 0) ? (*ptr++ = (((uint32_t)(*ptr + 1) << 16) / cb - 0x80) >> 8) : (*ptr++ = 0);
		}
		else
		{
			for (uint16_t i = 0; i < nBytes; i++)
 998:	0f 5f       	subi	r16, 0xFF	; 255
 99a:	1f 4f       	sbci	r17, 0xFF	; 255
 99c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <nBytes>
 9a0:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <nBytes+0x1>
 9a4:	21 96       	adiw	r28, 0x01	; 1
 9a6:	08 17       	cp	r16, r24
 9a8:	19 07       	cpc	r17, r25
 9aa:	f8 f2       	brcs	.-66     	; 0x96a <setBrightness+0x14c>
				(*ptr > 0) ? (*ptr++ = ((uint32_t)(*ptr + 1) * (nb << 8) / cb - 0x80) >> 8) : (*ptr++ = 0);
		}
		brightness = b;	
 9ac:	d0 92 06 01 	sts	0x0106, r13	; 0x800106 <brightness>
	}
}
 9b0:	df 91       	pop	r29
 9b2:	cf 91       	pop	r28
 9b4:	1f 91       	pop	r17
 9b6:	0f 91       	pop	r16
 9b8:	ff 90       	pop	r15
 9ba:	ef 90       	pop	r14
 9bc:	df 90       	pop	r13
 9be:	bf 90       	pop	r11
 9c0:	af 90       	pop	r10
 9c2:	9f 90       	pop	r9
 9c4:	8f 90       	pop	r8
 9c6:	7f 90       	pop	r7
 9c8:	6f 90       	pop	r6
 9ca:	5f 90       	pop	r5
 9cc:	4f 90       	pop	r4
 9ce:	08 95       	ret

000009d0 <__udivmodsi4>:
 9d0:	a1 e2       	ldi	r26, 0x21	; 33
 9d2:	1a 2e       	mov	r1, r26
 9d4:	aa 1b       	sub	r26, r26
 9d6:	bb 1b       	sub	r27, r27
 9d8:	fd 01       	movw	r30, r26
 9da:	0d c0       	rjmp	.+26     	; 0x9f6 <__udivmodsi4_ep>

000009dc <__udivmodsi4_loop>:
 9dc:	aa 1f       	adc	r26, r26
 9de:	bb 1f       	adc	r27, r27
 9e0:	ee 1f       	adc	r30, r30
 9e2:	ff 1f       	adc	r31, r31
 9e4:	a2 17       	cp	r26, r18
 9e6:	b3 07       	cpc	r27, r19
 9e8:	e4 07       	cpc	r30, r20
 9ea:	f5 07       	cpc	r31, r21
 9ec:	20 f0       	brcs	.+8      	; 0x9f6 <__udivmodsi4_ep>
 9ee:	a2 1b       	sub	r26, r18
 9f0:	b3 0b       	sbc	r27, r19
 9f2:	e4 0b       	sbc	r30, r20
 9f4:	f5 0b       	sbc	r31, r21

000009f6 <__udivmodsi4_ep>:
 9f6:	66 1f       	adc	r22, r22
 9f8:	77 1f       	adc	r23, r23
 9fa:	88 1f       	adc	r24, r24
 9fc:	99 1f       	adc	r25, r25
 9fe:	1a 94       	dec	r1
 a00:	69 f7       	brne	.-38     	; 0x9dc <__udivmodsi4_loop>
 a02:	60 95       	com	r22
 a04:	70 95       	com	r23
 a06:	80 95       	com	r24
 a08:	90 95       	com	r25
 a0a:	9b 01       	movw	r18, r22
 a0c:	ac 01       	movw	r20, r24
 a0e:	bd 01       	movw	r22, r26
 a10:	cf 01       	movw	r24, r30
 a12:	08 95       	ret

00000a14 <__umulhisi3>:
 a14:	a2 9f       	mul	r26, r18
 a16:	b0 01       	movw	r22, r0
 a18:	b3 9f       	mul	r27, r19
 a1a:	c0 01       	movw	r24, r0
 a1c:	a3 9f       	mul	r26, r19
 a1e:	70 0d       	add	r23, r0
 a20:	81 1d       	adc	r24, r1
 a22:	11 24       	eor	r1, r1
 a24:	91 1d       	adc	r25, r1
 a26:	b2 9f       	mul	r27, r18
 a28:	70 0d       	add	r23, r0
 a2a:	81 1d       	adc	r24, r1
 a2c:	11 24       	eor	r1, r1
 a2e:	91 1d       	adc	r25, r1
 a30:	08 95       	ret

00000a32 <__mulshisi3>:
 a32:	b7 ff       	sbrs	r27, 7
 a34:	04 c0       	rjmp	.+8      	; 0xa3e <__muluhisi3>

00000a36 <__mulohisi3>:
 a36:	03 d0       	rcall	.+6      	; 0xa3e <__muluhisi3>
 a38:	82 1b       	sub	r24, r18
 a3a:	93 0b       	sbc	r25, r19
 a3c:	08 95       	ret

00000a3e <__muluhisi3>:
 a3e:	ea df       	rcall	.-44     	; 0xa14 <__umulhisi3>
 a40:	a5 9f       	mul	r26, r21
 a42:	90 0d       	add	r25, r0
 a44:	b4 9f       	mul	r27, r20
 a46:	90 0d       	add	r25, r0
 a48:	a4 9f       	mul	r26, r20
 a4a:	80 0d       	add	r24, r0
 a4c:	91 1d       	adc	r25, r1
 a4e:	11 24       	eor	r1, r1
 a50:	08 95       	ret

00000a52 <malloc>:
 a52:	cf 93       	push	r28
 a54:	df 93       	push	r29
 a56:	82 30       	cpi	r24, 0x02	; 2
 a58:	91 05       	cpc	r25, r1
 a5a:	10 f4       	brcc	.+4      	; 0xa60 <malloc+0xe>
 a5c:	82 e0       	ldi	r24, 0x02	; 2
 a5e:	90 e0       	ldi	r25, 0x00	; 0
 a60:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <__flp>
 a64:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <__flp+0x1>
 a68:	20 e0       	ldi	r18, 0x00	; 0
 a6a:	30 e0       	ldi	r19, 0x00	; 0
 a6c:	c0 e0       	ldi	r28, 0x00	; 0
 a6e:	d0 e0       	ldi	r29, 0x00	; 0
 a70:	30 97       	sbiw	r30, 0x00	; 0
 a72:	11 f1       	breq	.+68     	; 0xab8 <malloc+0x66>
 a74:	40 81       	ld	r20, Z
 a76:	51 81       	ldd	r21, Z+1	; 0x01
 a78:	48 17       	cp	r20, r24
 a7a:	59 07       	cpc	r21, r25
 a7c:	c0 f0       	brcs	.+48     	; 0xaae <malloc+0x5c>
 a7e:	48 17       	cp	r20, r24
 a80:	59 07       	cpc	r21, r25
 a82:	61 f4       	brne	.+24     	; 0xa9c <malloc+0x4a>
 a84:	82 81       	ldd	r24, Z+2	; 0x02
 a86:	93 81       	ldd	r25, Z+3	; 0x03
 a88:	20 97       	sbiw	r28, 0x00	; 0
 a8a:	19 f0       	breq	.+6      	; 0xa92 <malloc+0x40>
 a8c:	9b 83       	std	Y+3, r25	; 0x03
 a8e:	8a 83       	std	Y+2, r24	; 0x02
 a90:	2b c0       	rjmp	.+86     	; 0xae8 <malloc+0x96>
 a92:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__flp+0x1>
 a96:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__flp>
 a9a:	26 c0       	rjmp	.+76     	; 0xae8 <malloc+0x96>
 a9c:	21 15       	cp	r18, r1
 a9e:	31 05       	cpc	r19, r1
 aa0:	19 f0       	breq	.+6      	; 0xaa8 <malloc+0x56>
 aa2:	42 17       	cp	r20, r18
 aa4:	53 07       	cpc	r21, r19
 aa6:	18 f4       	brcc	.+6      	; 0xaae <malloc+0x5c>
 aa8:	9a 01       	movw	r18, r20
 aaa:	be 01       	movw	r22, r28
 aac:	df 01       	movw	r26, r30
 aae:	ef 01       	movw	r28, r30
 ab0:	02 80       	ldd	r0, Z+2	; 0x02
 ab2:	f3 81       	ldd	r31, Z+3	; 0x03
 ab4:	e0 2d       	mov	r30, r0
 ab6:	dc cf       	rjmp	.-72     	; 0xa70 <malloc+0x1e>
 ab8:	21 15       	cp	r18, r1
 aba:	31 05       	cpc	r19, r1
 abc:	09 f1       	breq	.+66     	; 0xb00 <malloc+0xae>
 abe:	28 1b       	sub	r18, r24
 ac0:	39 0b       	sbc	r19, r25
 ac2:	24 30       	cpi	r18, 0x04	; 4
 ac4:	31 05       	cpc	r19, r1
 ac6:	90 f4       	brcc	.+36     	; 0xaec <malloc+0x9a>
 ac8:	12 96       	adiw	r26, 0x02	; 2
 aca:	8d 91       	ld	r24, X+
 acc:	9c 91       	ld	r25, X
 ace:	13 97       	sbiw	r26, 0x03	; 3
 ad0:	61 15       	cp	r22, r1
 ad2:	71 05       	cpc	r23, r1
 ad4:	21 f0       	breq	.+8      	; 0xade <malloc+0x8c>
 ad6:	fb 01       	movw	r30, r22
 ad8:	93 83       	std	Z+3, r25	; 0x03
 ada:	82 83       	std	Z+2, r24	; 0x02
 adc:	04 c0       	rjmp	.+8      	; 0xae6 <malloc+0x94>
 ade:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__flp+0x1>
 ae2:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__flp>
 ae6:	fd 01       	movw	r30, r26
 ae8:	32 96       	adiw	r30, 0x02	; 2
 aea:	44 c0       	rjmp	.+136    	; 0xb74 <malloc+0x122>
 aec:	fd 01       	movw	r30, r26
 aee:	e2 0f       	add	r30, r18
 af0:	f3 1f       	adc	r31, r19
 af2:	81 93       	st	Z+, r24
 af4:	91 93       	st	Z+, r25
 af6:	22 50       	subi	r18, 0x02	; 2
 af8:	31 09       	sbc	r19, r1
 afa:	2d 93       	st	X+, r18
 afc:	3c 93       	st	X, r19
 afe:	3a c0       	rjmp	.+116    	; 0xb74 <malloc+0x122>
 b00:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <__brkval>
 b04:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <__brkval+0x1>
 b08:	23 2b       	or	r18, r19
 b0a:	41 f4       	brne	.+16     	; 0xb1c <malloc+0xca>
 b0c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 b10:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 b14:	30 93 17 01 	sts	0x0117, r19	; 0x800117 <__brkval+0x1>
 b18:	20 93 16 01 	sts	0x0116, r18	; 0x800116 <__brkval>
 b1c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 b20:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 b24:	21 15       	cp	r18, r1
 b26:	31 05       	cpc	r19, r1
 b28:	41 f4       	brne	.+16     	; 0xb3a <malloc+0xe8>
 b2a:	2d b7       	in	r18, 0x3d	; 61
 b2c:	3e b7       	in	r19, 0x3e	; 62
 b2e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 b32:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 b36:	24 1b       	sub	r18, r20
 b38:	35 0b       	sbc	r19, r21
 b3a:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <__brkval>
 b3e:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <__brkval+0x1>
 b42:	e2 17       	cp	r30, r18
 b44:	f3 07       	cpc	r31, r19
 b46:	a0 f4       	brcc	.+40     	; 0xb70 <malloc+0x11e>
 b48:	2e 1b       	sub	r18, r30
 b4a:	3f 0b       	sbc	r19, r31
 b4c:	28 17       	cp	r18, r24
 b4e:	39 07       	cpc	r19, r25
 b50:	78 f0       	brcs	.+30     	; 0xb70 <malloc+0x11e>
 b52:	ac 01       	movw	r20, r24
 b54:	4e 5f       	subi	r20, 0xFE	; 254
 b56:	5f 4f       	sbci	r21, 0xFF	; 255
 b58:	24 17       	cp	r18, r20
 b5a:	35 07       	cpc	r19, r21
 b5c:	48 f0       	brcs	.+18     	; 0xb70 <malloc+0x11e>
 b5e:	4e 0f       	add	r20, r30
 b60:	5f 1f       	adc	r21, r31
 b62:	50 93 17 01 	sts	0x0117, r21	; 0x800117 <__brkval+0x1>
 b66:	40 93 16 01 	sts	0x0116, r20	; 0x800116 <__brkval>
 b6a:	81 93       	st	Z+, r24
 b6c:	91 93       	st	Z+, r25
 b6e:	02 c0       	rjmp	.+4      	; 0xb74 <malloc+0x122>
 b70:	e0 e0       	ldi	r30, 0x00	; 0
 b72:	f0 e0       	ldi	r31, 0x00	; 0
 b74:	cf 01       	movw	r24, r30
 b76:	df 91       	pop	r29
 b78:	cf 91       	pop	r28
 b7a:	08 95       	ret

00000b7c <free>:
 b7c:	0f 93       	push	r16
 b7e:	1f 93       	push	r17
 b80:	cf 93       	push	r28
 b82:	df 93       	push	r29
 b84:	00 97       	sbiw	r24, 0x00	; 0
 b86:	09 f4       	brne	.+2      	; 0xb8a <free+0xe>
 b88:	8c c0       	rjmp	.+280    	; 0xca2 <free+0x126>
 b8a:	fc 01       	movw	r30, r24
 b8c:	32 97       	sbiw	r30, 0x02	; 2
 b8e:	13 82       	std	Z+3, r1	; 0x03
 b90:	12 82       	std	Z+2, r1	; 0x02
 b92:	00 91 18 01 	lds	r16, 0x0118	; 0x800118 <__flp>
 b96:	10 91 19 01 	lds	r17, 0x0119	; 0x800119 <__flp+0x1>
 b9a:	01 15       	cp	r16, r1
 b9c:	11 05       	cpc	r17, r1
 b9e:	81 f4       	brne	.+32     	; 0xbc0 <free+0x44>
 ba0:	20 81       	ld	r18, Z
 ba2:	31 81       	ldd	r19, Z+1	; 0x01
 ba4:	82 0f       	add	r24, r18
 ba6:	93 1f       	adc	r25, r19
 ba8:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <__brkval>
 bac:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <__brkval+0x1>
 bb0:	28 17       	cp	r18, r24
 bb2:	39 07       	cpc	r19, r25
 bb4:	79 f5       	brne	.+94     	; 0xc14 <free+0x98>
 bb6:	f0 93 17 01 	sts	0x0117, r31	; 0x800117 <__brkval+0x1>
 bba:	e0 93 16 01 	sts	0x0116, r30	; 0x800116 <__brkval>
 bbe:	71 c0       	rjmp	.+226    	; 0xca2 <free+0x126>
 bc0:	d8 01       	movw	r26, r16
 bc2:	40 e0       	ldi	r20, 0x00	; 0
 bc4:	50 e0       	ldi	r21, 0x00	; 0
 bc6:	ae 17       	cp	r26, r30
 bc8:	bf 07       	cpc	r27, r31
 bca:	50 f4       	brcc	.+20     	; 0xbe0 <free+0x64>
 bcc:	12 96       	adiw	r26, 0x02	; 2
 bce:	2d 91       	ld	r18, X+
 bd0:	3c 91       	ld	r19, X
 bd2:	13 97       	sbiw	r26, 0x03	; 3
 bd4:	ad 01       	movw	r20, r26
 bd6:	21 15       	cp	r18, r1
 bd8:	31 05       	cpc	r19, r1
 bda:	09 f1       	breq	.+66     	; 0xc1e <free+0xa2>
 bdc:	d9 01       	movw	r26, r18
 bde:	f3 cf       	rjmp	.-26     	; 0xbc6 <free+0x4a>
 be0:	9d 01       	movw	r18, r26
 be2:	da 01       	movw	r26, r20
 be4:	33 83       	std	Z+3, r19	; 0x03
 be6:	22 83       	std	Z+2, r18	; 0x02
 be8:	60 81       	ld	r22, Z
 bea:	71 81       	ldd	r23, Z+1	; 0x01
 bec:	86 0f       	add	r24, r22
 bee:	97 1f       	adc	r25, r23
 bf0:	82 17       	cp	r24, r18
 bf2:	93 07       	cpc	r25, r19
 bf4:	69 f4       	brne	.+26     	; 0xc10 <free+0x94>
 bf6:	ec 01       	movw	r28, r24
 bf8:	28 81       	ld	r18, Y
 bfa:	39 81       	ldd	r19, Y+1	; 0x01
 bfc:	26 0f       	add	r18, r22
 bfe:	37 1f       	adc	r19, r23
 c00:	2e 5f       	subi	r18, 0xFE	; 254
 c02:	3f 4f       	sbci	r19, 0xFF	; 255
 c04:	31 83       	std	Z+1, r19	; 0x01
 c06:	20 83       	st	Z, r18
 c08:	8a 81       	ldd	r24, Y+2	; 0x02
 c0a:	9b 81       	ldd	r25, Y+3	; 0x03
 c0c:	93 83       	std	Z+3, r25	; 0x03
 c0e:	82 83       	std	Z+2, r24	; 0x02
 c10:	45 2b       	or	r20, r21
 c12:	29 f4       	brne	.+10     	; 0xc1e <free+0xa2>
 c14:	f0 93 19 01 	sts	0x0119, r31	; 0x800119 <__flp+0x1>
 c18:	e0 93 18 01 	sts	0x0118, r30	; 0x800118 <__flp>
 c1c:	42 c0       	rjmp	.+132    	; 0xca2 <free+0x126>
 c1e:	13 96       	adiw	r26, 0x03	; 3
 c20:	fc 93       	st	X, r31
 c22:	ee 93       	st	-X, r30
 c24:	12 97       	sbiw	r26, 0x02	; 2
 c26:	ed 01       	movw	r28, r26
 c28:	49 91       	ld	r20, Y+
 c2a:	59 91       	ld	r21, Y+
 c2c:	9e 01       	movw	r18, r28
 c2e:	24 0f       	add	r18, r20
 c30:	35 1f       	adc	r19, r21
 c32:	e2 17       	cp	r30, r18
 c34:	f3 07       	cpc	r31, r19
 c36:	71 f4       	brne	.+28     	; 0xc54 <free+0xd8>
 c38:	80 81       	ld	r24, Z
 c3a:	91 81       	ldd	r25, Z+1	; 0x01
 c3c:	84 0f       	add	r24, r20
 c3e:	95 1f       	adc	r25, r21
 c40:	02 96       	adiw	r24, 0x02	; 2
 c42:	11 96       	adiw	r26, 0x01	; 1
 c44:	9c 93       	st	X, r25
 c46:	8e 93       	st	-X, r24
 c48:	82 81       	ldd	r24, Z+2	; 0x02
 c4a:	93 81       	ldd	r25, Z+3	; 0x03
 c4c:	13 96       	adiw	r26, 0x03	; 3
 c4e:	9c 93       	st	X, r25
 c50:	8e 93       	st	-X, r24
 c52:	12 97       	sbiw	r26, 0x02	; 2
 c54:	e0 e0       	ldi	r30, 0x00	; 0
 c56:	f0 e0       	ldi	r31, 0x00	; 0
 c58:	d8 01       	movw	r26, r16
 c5a:	12 96       	adiw	r26, 0x02	; 2
 c5c:	8d 91       	ld	r24, X+
 c5e:	9c 91       	ld	r25, X
 c60:	13 97       	sbiw	r26, 0x03	; 3
 c62:	00 97       	sbiw	r24, 0x00	; 0
 c64:	19 f0       	breq	.+6      	; 0xc6c <free+0xf0>
 c66:	f8 01       	movw	r30, r16
 c68:	8c 01       	movw	r16, r24
 c6a:	f6 cf       	rjmp	.-20     	; 0xc58 <free+0xdc>
 c6c:	8d 91       	ld	r24, X+
 c6e:	9c 91       	ld	r25, X
 c70:	98 01       	movw	r18, r16
 c72:	2e 5f       	subi	r18, 0xFE	; 254
 c74:	3f 4f       	sbci	r19, 0xFF	; 255
 c76:	82 0f       	add	r24, r18
 c78:	93 1f       	adc	r25, r19
 c7a:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <__brkval>
 c7e:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <__brkval+0x1>
 c82:	28 17       	cp	r18, r24
 c84:	39 07       	cpc	r19, r25
 c86:	69 f4       	brne	.+26     	; 0xca2 <free+0x126>
 c88:	30 97       	sbiw	r30, 0x00	; 0
 c8a:	29 f4       	brne	.+10     	; 0xc96 <free+0x11a>
 c8c:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <__flp+0x1>
 c90:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <__flp>
 c94:	02 c0       	rjmp	.+4      	; 0xc9a <free+0x11e>
 c96:	13 82       	std	Z+3, r1	; 0x03
 c98:	12 82       	std	Z+2, r1	; 0x02
 c9a:	10 93 17 01 	sts	0x0117, r17	; 0x800117 <__brkval+0x1>
 c9e:	00 93 16 01 	sts	0x0116, r16	; 0x800116 <__brkval>
 ca2:	df 91       	pop	r29
 ca4:	cf 91       	pop	r28
 ca6:	1f 91       	pop	r17
 ca8:	0f 91       	pop	r16
 caa:	08 95       	ret

00000cac <memset>:
 cac:	dc 01       	movw	r26, r24
 cae:	01 c0       	rjmp	.+2      	; 0xcb2 <memset+0x6>
 cb0:	6d 93       	st	X+, r22
 cb2:	41 50       	subi	r20, 0x01	; 1
 cb4:	50 40       	sbci	r21, 0x00	; 0
 cb6:	e0 f7       	brcc	.-8      	; 0xcb0 <memset+0x4>
 cb8:	08 95       	ret

00000cba <_exit>:
 cba:	f8 94       	cli

00000cbc <__stop_program>:
 cbc:	ff cf       	rjmp	.-2      	; 0xcbc <__stop_program>
