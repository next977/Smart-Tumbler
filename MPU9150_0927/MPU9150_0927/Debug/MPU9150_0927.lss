
MPU9150_0927.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000bd2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b5e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000431  00800100  00800100  00000bd2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bd2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c04  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000c40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000975  00000000  00000000  00000c98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000022c  00000000  00000000  0000160d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000053b  00000000  00000000  00001839  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b4  00000000  00000000  00001d74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000288  00000000  00000000  00001e28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000204  00000000  00000000  000020b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000022b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	5c c0       	rjmp	.+184    	; 0xba <__ctors_end>
   2:	00 00       	nop
   4:	6a c0       	rjmp	.+212    	; 0xda <__bad_interrupt>
   6:	00 00       	nop
   8:	68 c0       	rjmp	.+208    	; 0xda <__bad_interrupt>
   a:	00 00       	nop
   c:	66 c0       	rjmp	.+204    	; 0xda <__bad_interrupt>
   e:	00 00       	nop
  10:	64 c0       	rjmp	.+200    	; 0xda <__bad_interrupt>
  12:	00 00       	nop
  14:	62 c0       	rjmp	.+196    	; 0xda <__bad_interrupt>
  16:	00 00       	nop
  18:	60 c0       	rjmp	.+192    	; 0xda <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5e c0       	rjmp	.+188    	; 0xda <__bad_interrupt>
  1e:	00 00       	nop
  20:	5c c0       	rjmp	.+184    	; 0xda <__bad_interrupt>
  22:	00 00       	nop
  24:	5a c0       	rjmp	.+180    	; 0xda <__bad_interrupt>
  26:	00 00       	nop
  28:	58 c0       	rjmp	.+176    	; 0xda <__bad_interrupt>
  2a:	00 00       	nop
  2c:	56 c0       	rjmp	.+172    	; 0xda <__bad_interrupt>
  2e:	00 00       	nop
  30:	54 c0       	rjmp	.+168    	; 0xda <__bad_interrupt>
  32:	00 00       	nop
  34:	52 c0       	rjmp	.+164    	; 0xda <__bad_interrupt>
  36:	00 00       	nop
  38:	50 c0       	rjmp	.+160    	; 0xda <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4e c0       	rjmp	.+156    	; 0xda <__bad_interrupt>
  3e:	00 00       	nop
  40:	4c c0       	rjmp	.+152    	; 0xda <__bad_interrupt>
  42:	00 00       	nop
  44:	4a c0       	rjmp	.+148    	; 0xda <__bad_interrupt>
  46:	00 00       	nop
  48:	48 c0       	rjmp	.+144    	; 0xda <__bad_interrupt>
  4a:	00 00       	nop
  4c:	46 c0       	rjmp	.+140    	; 0xda <__bad_interrupt>
  4e:	00 00       	nop
  50:	44 c0       	rjmp	.+136    	; 0xda <__bad_interrupt>
  52:	00 00       	nop
  54:	42 c0       	rjmp	.+132    	; 0xda <__bad_interrupt>
  56:	00 00       	nop
  58:	40 c0       	rjmp	.+128    	; 0xda <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3e c0       	rjmp	.+124    	; 0xda <__bad_interrupt>
  5e:	00 00       	nop
  60:	3c c0       	rjmp	.+120    	; 0xda <__bad_interrupt>
  62:	00 00       	nop
  64:	3a c0       	rjmp	.+116    	; 0xda <__bad_interrupt>
  66:	00 00       	nop
  68:	38 c0       	rjmp	.+112    	; 0xda <__bad_interrupt>
  6a:	00 00       	nop
  6c:	36 c0       	rjmp	.+108    	; 0xda <__bad_interrupt>
  6e:	00 00       	nop
  70:	34 c0       	rjmp	.+104    	; 0xda <__bad_interrupt>
  72:	00 00       	nop
  74:	32 c0       	rjmp	.+100    	; 0xda <__bad_interrupt>
  76:	00 00       	nop
  78:	30 c0       	rjmp	.+96     	; 0xda <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2e c0       	rjmp	.+92     	; 0xda <__bad_interrupt>
  7e:	00 00       	nop
  80:	2c c0       	rjmp	.+88     	; 0xda <__bad_interrupt>
  82:	00 00       	nop
  84:	2a c0       	rjmp	.+84     	; 0xda <__bad_interrupt>
  86:	00 00       	nop
  88:	28 c0       	rjmp	.+80     	; 0xda <__bad_interrupt>
  8a:	00 00       	nop
  8c:	08 4a       	sbci	r16, 0xA8	; 168
  8e:	d7 3b       	cpi	r29, 0xB7	; 183
  90:	3b ce       	rjmp	.-906    	; 0xfffffd08 <__eeprom_end+0xff7efd08>
  92:	01 6e       	ori	r16, 0xE1	; 225
  94:	84 bc       	out	0x24, r8	; 36
  96:	bf fd       	.word	0xfdbf	; ????
  98:	c1 2f       	mov	r28, r17
  9a:	3d 6c       	ori	r19, 0xCD	; 205
  9c:	74 31       	cpi	r23, 0x14	; 20
  9e:	9a bd       	out	0x2a, r25	; 42
  a0:	56 83       	std	Z+6, r21	; 0x06
  a2:	3d da       	rcall	.-2950   	; 0xfffff51e <__eeprom_end+0xff7ef51e>
  a4:	3d 00       	.word	0x003d	; ????
  a6:	c7 7f       	andi	r28, 0xF7	; 247
  a8:	11 be       	out	0x31, r1	; 49
  aa:	d9 e4       	ldi	r29, 0x49	; 73
  ac:	bb 4c       	sbci	r27, 0xCB	; 203
  ae:	3e 91       	ld	r19, -X
  b0:	6b aa       	std	Y+51, r6	; 0x33
  b2:	aa be       	out	0x3a, r10	; 58
  b4:	00 00       	nop
  b6:	00 80       	ld	r0, Z
  b8:	3f 00       	.word	0x003f	; ????

000000ba <__ctors_end>:
  ba:	11 24       	eor	r1, r1
  bc:	1f be       	out	0x3f, r1	; 63
  be:	cf ef       	ldi	r28, 0xFF	; 255
  c0:	d0 e1       	ldi	r29, 0x10	; 16
  c2:	de bf       	out	0x3e, r29	; 62
  c4:	cd bf       	out	0x3d, r28	; 61

000000c6 <__do_clear_bss>:
  c6:	25 e0       	ldi	r18, 0x05	; 5
  c8:	a0 e0       	ldi	r26, 0x00	; 0
  ca:	b1 e0       	ldi	r27, 0x01	; 1
  cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
  ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
  d0:	a1 33       	cpi	r26, 0x31	; 49
  d2:	b2 07       	cpc	r27, r18
  d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
  d6:	3b d2       	rcall	.+1142   	; 0x54e <main>
  d8:	40 c5       	rjmp	.+2688   	; 0xb5a <_exit>

000000da <__bad_interrupt>:
  da:	92 cf       	rjmp	.-220    	; 0x0 <__vectors>

000000dc <init_devices>:
}

void init_devices(void)
{

	TWCR = (1<<TWEN);	// TWI Control Reg, TWI Enable
  dc:	84 e0       	ldi	r24, 0x04	; 4
  de:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	TWSR = 0x00;		// TWI Status Reg, initialization, prescaler : 1
  e2:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
	TWBR = 0x12;		// TWI Bit Rate Reg, Fscl = 400KHz(Fcpu/(16+2*TWBR*Prescaler) = Fscl)
  e6:	82 e1       	ldi	r24, 0x12	; 18
  e8:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
  ec:	08 95       	ret

000000ee <I2C_write>:
}

void I2C_write(unsigned char slv_addr, unsigned char address, unsigned char byte)// master
{
	// 시작신호-> 슬레이브 어드레스찾기-> 데이터쓸 위치(슬레이브의 어드레스)-> 쓸데이터
	TWCR = ((1<<TWINT)|(1<<TWSTA)|(1<<TWEN)); // Start
  ee:	94 ea       	ldi	r25, 0xA4	; 164
  f0:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while(((TWCR & 0x80) == 0x00) || (TWSR & 0xF8) != TW_START);
  f4:	e4 e7       	ldi	r30, 0x74	; 116
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	a1 e7       	ldi	r26, 0x71	; 113
  fa:	b0 e0       	ldi	r27, 0x00	; 0
  fc:	90 81       	ld	r25, Z
  fe:	99 23       	and	r25, r25
 100:	ec f7       	brge	.-6      	; 0xfc <I2C_write+0xe>
 102:	9c 91       	ld	r25, X
 104:	98 7f       	andi	r25, 0xF8	; 248
 106:	98 30       	cpi	r25, 0x08	; 8
 108:	c9 f7       	brne	.-14     	; 0xfc <I2C_write+0xe>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10a:	2f ef       	ldi	r18, 0xFF	; 255
 10c:	39 ef       	ldi	r19, 0xF9	; 249
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	21 50       	subi	r18, 0x01	; 1
 112:	30 40       	sbci	r19, 0x00	; 0
 114:	90 40       	sbci	r25, 0x00	; 0
 116:	e1 f7       	brne	.-8      	; 0x110 <I2C_write+0x22>
 118:	00 c0       	rjmp	.+0      	; 0x11a <I2C_write+0x2c>
 11a:	00 00       	nop
	_delay_ms(20);
	
	TWDR = slv_addr;  // 슬레이브 어드레스 입력
 11c:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = ((1<<TWINT)|(1<<TWEN));
 120:	84 e8       	ldi	r24, 0x84	; 132
 122:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while(((TWCR & 0x80) == 0x00) || (TWSR & 0xF8) != TW_MT_SLA_ACK); // SLA+W transmitted, ACK received
 126:	e4 e7       	ldi	r30, 0x74	; 116
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	a1 e7       	ldi	r26, 0x71	; 113
 12c:	b0 e0       	ldi	r27, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	88 23       	and	r24, r24
 132:	ec f7       	brge	.-6      	; 0x12e <I2C_write+0x40>
 134:	8c 91       	ld	r24, X
 136:	88 7f       	andi	r24, 0xF8	; 248
 138:	88 31       	cpi	r24, 0x18	; 24
 13a:	c9 f7       	brne	.-14     	; 0x12e <I2C_write+0x40>
 13c:	2f ef       	ldi	r18, 0xFF	; 255
 13e:	39 ef       	ldi	r19, 0xF9	; 249
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	21 50       	subi	r18, 0x01	; 1
 144:	30 40       	sbci	r19, 0x00	; 0
 146:	80 40       	sbci	r24, 0x00	; 0
 148:	e1 f7       	brne	.-8      	; 0x142 <I2C_write+0x54>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <I2C_write+0x5e>
 14c:	00 00       	nop
	_delay_ms(20);
	
	TWDR = address;  // 슬레이브 센서내의 레지스터 어드레스 선택
 14e:	60 93 73 00 	sts	0x0073, r22	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = ((1<<TWINT)|(1<<TWEN));
 152:	84 e8       	ldi	r24, 0x84	; 132
 154:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while(((TWCR & 0x80) == 0x00) || (TWSR & 0xF8) != TW_MT_DATA_ACK); // data transmitted, ACK received
 158:	e4 e7       	ldi	r30, 0x74	; 116
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	a1 e7       	ldi	r26, 0x71	; 113
 15e:	b0 e0       	ldi	r27, 0x00	; 0
 160:	80 81       	ld	r24, Z
 162:	88 23       	and	r24, r24
 164:	ec f7       	brge	.-6      	; 0x160 <I2C_write+0x72>
 166:	8c 91       	ld	r24, X
 168:	88 7f       	andi	r24, 0xF8	; 248
 16a:	88 32       	cpi	r24, 0x28	; 40
 16c:	c9 f7       	brne	.-14     	; 0x160 <I2C_write+0x72>
 16e:	9f ef       	ldi	r25, 0xFF	; 255
 170:	29 ef       	ldi	r18, 0xF9	; 249
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	91 50       	subi	r25, 0x01	; 1
 176:	20 40       	sbci	r18, 0x00	; 0
 178:	30 40       	sbci	r19, 0x00	; 0
 17a:	e1 f7       	brne	.-8      	; 0x174 <I2C_write+0x86>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <I2C_write+0x90>
 17e:	00 00       	nop
	_delay_ms(20);
	
	TWDR = byte;  // 쓰고자 하는 데이터
 180:	40 93 73 00 	sts	0x0073, r20	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = ((1<<TWINT)|(1<<TWEN));
 184:	84 e8       	ldi	r24, 0x84	; 132
 186:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while(((TWCR & 0x80) == 0x00) || (TWSR & 0xF8) != TW_MT_DATA_ACK); // data transmitted, ACK received
 18a:	e4 e7       	ldi	r30, 0x74	; 116
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	a1 e7       	ldi	r26, 0x71	; 113
 190:	b0 e0       	ldi	r27, 0x00	; 0
 192:	80 81       	ld	r24, Z
 194:	88 23       	and	r24, r24
 196:	ec f7       	brge	.-6      	; 0x192 <I2C_write+0xa4>
 198:	8c 91       	ld	r24, X
 19a:	88 7f       	andi	r24, 0xF8	; 248
 19c:	88 32       	cpi	r24, 0x28	; 40
 19e:	c9 f7       	brne	.-14     	; 0x192 <I2C_write+0xa4>
 1a0:	8f ef       	ldi	r24, 0xFF	; 255
 1a2:	99 ef       	ldi	r25, 0xF9	; 249
 1a4:	20 e0       	ldi	r18, 0x00	; 0
 1a6:	81 50       	subi	r24, 0x01	; 1
 1a8:	90 40       	sbci	r25, 0x00	; 0
 1aa:	20 40       	sbci	r18, 0x00	; 0
 1ac:	e1 f7       	brne	.-8      	; 0x1a6 <I2C_write+0xb8>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <I2C_write+0xc2>
 1b0:	00 00       	nop
	_delay_ms(20);
	
	TWCR = ((1<<TWINT)|(1<<TWSTO)|(1<<TWEN)); // End
 1b2:	84 e9       	ldi	r24, 0x94	; 148
 1b4:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 1b8:	3f ef       	ldi	r19, 0xFF	; 255
 1ba:	89 ef       	ldi	r24, 0xF9	; 249
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	31 50       	subi	r19, 0x01	; 1
 1c0:	80 40       	sbci	r24, 0x00	; 0
 1c2:	90 40       	sbci	r25, 0x00	; 0
 1c4:	e1 f7       	brne	.-8      	; 0x1be <I2C_write+0xd0>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <I2C_write+0xda>
 1c8:	00 00       	nop
 1ca:	08 95       	ret

000001cc <I2C_read>:
int I2C_read(unsigned char slv_addr, unsigned char regi)  //master
{
	//시작신호-> 슬레이브 어드레스찾기-> 데이터쓸 위치(슬레이브의 어드레스)	-> repeated start -> Master Receive 모드 설정 -> 수신확인 -> stop
	unsigned int result;
	
	TWCR = ((1<<TWINT)|(1<<TWSTA)|(1<<TWEN)); // Start
 1cc:	94 ea       	ldi	r25, 0xA4	; 164
 1ce:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while(((TWCR & 0x80) == 0x00) || (TWSR & 0xF8) != TW_START);
 1d2:	e4 e7       	ldi	r30, 0x74	; 116
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	a1 e7       	ldi	r26, 0x71	; 113
 1d8:	b0 e0       	ldi	r27, 0x00	; 0
 1da:	90 81       	ld	r25, Z
 1dc:	99 23       	and	r25, r25
 1de:	ec f7       	brge	.-6      	; 0x1da <I2C_read+0xe>
 1e0:	9c 91       	ld	r25, X
 1e2:	98 7f       	andi	r25, 0xF8	; 248
 1e4:	98 30       	cpi	r25, 0x08	; 8
 1e6:	c9 f7       	brne	.-14     	; 0x1da <I2C_read+0xe>
 1e8:	2f ef       	ldi	r18, 0xFF	; 255
 1ea:	39 ef       	ldi	r19, 0xF9	; 249
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	21 50       	subi	r18, 0x01	; 1
 1f0:	30 40       	sbci	r19, 0x00	; 0
 1f2:	90 40       	sbci	r25, 0x00	; 0
 1f4:	e1 f7       	brne	.-8      	; 0x1ee <I2C_read+0x22>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <I2C_read+0x2c>
 1f8:	00 00       	nop
	_delay_ms(20);
	
	TWDR = slv_addr;  //슬레이브 어드레스 입력?
 1fa:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	
	TWCR = ((1<<TWINT)|(1<<TWEN));
 1fe:	94 e8       	ldi	r25, 0x84	; 132
 200:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while(((TWCR & 0x80) == 0x00) || (TWSR & 0xF8) != TW_MT_SLA_ACK);
 204:	e4 e7       	ldi	r30, 0x74	; 116
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	a1 e7       	ldi	r26, 0x71	; 113
 20a:	b0 e0       	ldi	r27, 0x00	; 0
 20c:	90 81       	ld	r25, Z
 20e:	99 23       	and	r25, r25
 210:	ec f7       	brge	.-6      	; 0x20c <I2C_read+0x40>
 212:	9c 91       	ld	r25, X
 214:	98 7f       	andi	r25, 0xF8	; 248
 216:	98 31       	cpi	r25, 0x18	; 24
 218:	c9 f7       	brne	.-14     	; 0x20c <I2C_read+0x40>
 21a:	2f ef       	ldi	r18, 0xFF	; 255
 21c:	39 ef       	ldi	r19, 0xF9	; 249
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	21 50       	subi	r18, 0x01	; 1
 222:	30 40       	sbci	r19, 0x00	; 0
 224:	90 40       	sbci	r25, 0x00	; 0
 226:	e1 f7       	brne	.-8      	; 0x220 <I2C_read+0x54>
 228:	00 c0       	rjmp	.+0      	; 0x22a <I2C_read+0x5e>
 22a:	00 00       	nop
	_delay_ms(20);
	
	TWDR = regi;  // 슬레이브 센서내의 레지스터 어드레스 선택?
 22c:	60 93 73 00 	sts	0x0073, r22	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	
	TWCR = ((1<<TWINT)|(1<<TWEN));
 230:	94 e8       	ldi	r25, 0x84	; 132
 232:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while(((TWCR & 0x80) == 0x00) || (TWSR & 0xF8) != TW_MT_DATA_ACK);
 236:	e4 e7       	ldi	r30, 0x74	; 116
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	a1 e7       	ldi	r26, 0x71	; 113
 23c:	b0 e0       	ldi	r27, 0x00	; 0
 23e:	90 81       	ld	r25, Z
 240:	99 23       	and	r25, r25
 242:	ec f7       	brge	.-6      	; 0x23e <I2C_read+0x72>
 244:	9c 91       	ld	r25, X
 246:	98 7f       	andi	r25, 0xF8	; 248
 248:	98 32       	cpi	r25, 0x28	; 40
 24a:	c9 f7       	brne	.-14     	; 0x23e <I2C_read+0x72>
 24c:	2f ef       	ldi	r18, 0xFF	; 255
 24e:	39 ef       	ldi	r19, 0xF9	; 249
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	21 50       	subi	r18, 0x01	; 1
 254:	30 40       	sbci	r19, 0x00	; 0
 256:	90 40       	sbci	r25, 0x00	; 0
 258:	e1 f7       	brne	.-8      	; 0x252 <I2C_read+0x86>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <I2C_read+0x90>
 25c:	00 00       	nop
	_delay_ms(20);
	
	TWCR = ((1<<TWINT)|(1<<TWSTA)|(1<<TWEN)); // repeated start
 25e:	94 ea       	ldi	r25, 0xA4	; 164
 260:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while(((TWCR & 0x80) == 0x00) || (TWSR & 0xF8) != TW_REP_START);
 264:	e4 e7       	ldi	r30, 0x74	; 116
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	a1 e7       	ldi	r26, 0x71	; 113
 26a:	b0 e0       	ldi	r27, 0x00	; 0
 26c:	90 81       	ld	r25, Z
 26e:	99 23       	and	r25, r25
 270:	ec f7       	brge	.-6      	; 0x26c <I2C_read+0xa0>
 272:	9c 91       	ld	r25, X
 274:	98 7f       	andi	r25, 0xF8	; 248
 276:	90 31       	cpi	r25, 0x10	; 16
 278:	c9 f7       	brne	.-14     	; 0x26c <I2C_read+0xa0>
 27a:	2f ef       	ldi	r18, 0xFF	; 255
 27c:	39 ef       	ldi	r19, 0xF9	; 249
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	21 50       	subi	r18, 0x01	; 1
 282:	30 40       	sbci	r19, 0x00	; 0
 284:	90 40       	sbci	r25, 0x00	; 0
 286:	e1 f7       	brne	.-8      	; 0x280 <I2C_read+0xb4>
 288:	00 c0       	rjmp	.+0      	; 0x28a <I2C_read+0xbe>
 28a:	00 00       	nop
	_delay_ms(20);
	
	TWDR = slv_addr+1; // Master Receiver Mode로 설정
 28c:	8f 5f       	subi	r24, 0xFF	; 255
 28e:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = ((1<<TWINT)|(1<<TWEN));
 292:	84 e8       	ldi	r24, 0x84	; 132
 294:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while(((TWCR & 0x80) == 0x00) || (TWSR & 0xF8) != TW_MR_SLA_ACK); // SLA+R transmitted, ACK received
 298:	e4 e7       	ldi	r30, 0x74	; 116
 29a:	f0 e0       	ldi	r31, 0x00	; 0
 29c:	a1 e7       	ldi	r26, 0x71	; 113
 29e:	b0 e0       	ldi	r27, 0x00	; 0
 2a0:	80 81       	ld	r24, Z
 2a2:	88 23       	and	r24, r24
 2a4:	ec f7       	brge	.-6      	; 0x2a0 <I2C_read+0xd4>
 2a6:	8c 91       	ld	r24, X
 2a8:	88 7f       	andi	r24, 0xF8	; 248
 2aa:	80 34       	cpi	r24, 0x40	; 64
 2ac:	c9 f7       	brne	.-14     	; 0x2a0 <I2C_read+0xd4>
 2ae:	2f ef       	ldi	r18, 0xFF	; 255
 2b0:	39 ef       	ldi	r19, 0xF9	; 249
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	21 50       	subi	r18, 0x01	; 1
 2b6:	30 40       	sbci	r19, 0x00	; 0
 2b8:	80 40       	sbci	r24, 0x00	; 0
 2ba:	e1 f7       	brne	.-8      	; 0x2b4 <I2C_read+0xe8>
 2bc:	00 c0       	rjmp	.+0      	; 0x2be <I2C_read+0xf2>
 2be:	00 00       	nop
	_delay_ms(20);
	
	TWCR = ((1<<TWINT)|(1<<TWEN));
 2c0:	84 e8       	ldi	r24, 0x84	; 132
 2c2:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while(((TWCR & 0x80) == 0x00) || (TWSR & 0xF8) != TW_MR_DATA_NACK); // 데이터 수신확인 신호 없음 수신?
 2c6:	e4 e7       	ldi	r30, 0x74	; 116
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	a1 e7       	ldi	r26, 0x71	; 113
 2cc:	b0 e0       	ldi	r27, 0x00	; 0
 2ce:	80 81       	ld	r24, Z
 2d0:	88 23       	and	r24, r24
 2d2:	ec f7       	brge	.-6      	; 0x2ce <I2C_read+0x102>
 2d4:	8c 91       	ld	r24, X
 2d6:	88 7f       	andi	r24, 0xF8	; 248
 2d8:	88 35       	cpi	r24, 0x58	; 88
 2da:	c9 f7       	brne	.-14     	; 0x2ce <I2C_read+0x102>
	result = TWDR; //데이터 기록
 2dc:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
 2e0:	9f ef       	ldi	r25, 0xFF	; 255
 2e2:	29 ef       	ldi	r18, 0xF9	; 249
 2e4:	30 e0       	ldi	r19, 0x00	; 0
 2e6:	91 50       	subi	r25, 0x01	; 1
 2e8:	20 40       	sbci	r18, 0x00	; 0
 2ea:	30 40       	sbci	r19, 0x00	; 0
 2ec:	e1 f7       	brne	.-8      	; 0x2e6 <I2C_read+0x11a>
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <I2C_read+0x124>
 2f0:	00 00       	nop
	_delay_ms(20);
	
	TWCR = ((1<<TWINT)|(1<<TWSTO)|(1<<TWEN));  // stop
 2f2:	94 e9       	ldi	r25, 0x94	; 148
 2f4:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	return result; // 데이터 반환
	_delay_ms(20);
}
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	08 95       	ret

000002fc <getRawData>:

void getRawData()
{
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
	buffer[3] = I2C_read(SLV_ADDRESS,ACCEL_YOUT_L);
	buffer[4] = I2C_read(SLV_ADDRESS,ACCEL_ZOUT_H);
	buffer[5] = I2C_read(SLV_ADDRESS,ACCEL_ZOUT_L);*/
	
	//GYRO
	buffer[6] = I2C_read(SLV_ADDRESS,GYRO_XOUT_H);
 300:	63 e4       	ldi	r22, 0x43	; 67
 302:	80 ed       	ldi	r24, 0xD0	; 208
 304:	63 df       	rcall	.-314    	; 0x1cc <I2C_read>
 306:	c7 e1       	ldi	r28, 0x17	; 23
 308:	d1 e0       	ldi	r29, 0x01	; 1
 30a:	9d 87       	std	Y+13, r25	; 0x0d
 30c:	8c 87       	std	Y+12, r24	; 0x0c
	buffer[7] = I2C_read(SLV_ADDRESS,GYRO_XOUT_L);
 30e:	64 e4       	ldi	r22, 0x44	; 68
 310:	80 ed       	ldi	r24, 0xD0	; 208
 312:	5c df       	rcall	.-328    	; 0x1cc <I2C_read>
 314:	9f 87       	std	Y+15, r25	; 0x0f
 316:	8e 87       	std	Y+14, r24	; 0x0e
	buffer[8] = I2C_read(SLV_ADDRESS,GYRO_YOUT_H);
 318:	65 e4       	ldi	r22, 0x45	; 69
 31a:	80 ed       	ldi	r24, 0xD0	; 208
 31c:	57 df       	rcall	.-338    	; 0x1cc <I2C_read>
 31e:	99 8b       	std	Y+17, r25	; 0x11
 320:	88 8b       	std	Y+16, r24	; 0x10
	buffer[9] = I2C_read(SLV_ADDRESS,GYRO_YOUT_L);
 322:	66 e4       	ldi	r22, 0x46	; 70
 324:	80 ed       	ldi	r24, 0xD0	; 208
 326:	52 df       	rcall	.-348    	; 0x1cc <I2C_read>
 328:	9b 8b       	std	Y+19, r25	; 0x13
 32a:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[10] = I2C_read(SLV_ADDRESS,GYRO_ZOUT_H);
 32c:	67 e4       	ldi	r22, 0x47	; 71
 32e:	80 ed       	ldi	r24, 0xD0	; 208
 330:	4d df       	rcall	.-358    	; 0x1cc <I2C_read>
 332:	9d 8b       	std	Y+21, r25	; 0x15
 334:	8c 8b       	std	Y+20, r24	; 0x14
	buffer[11] = I2C_read(SLV_ADDRESS,GYRO_ZOUT_L);
 336:	68 e4       	ldi	r22, 0x48	; 72
 338:	80 ed       	ldi	r24, 0xD0	; 208
 33a:	48 df       	rcall	.-368    	; 0x1cc <I2C_read>
 33c:	9f 8b       	std	Y+23, r25	; 0x17
 33e:	8e 8b       	std	Y+22, r24	; 0x16
	
	buffer[18] = I2C_read(SLV_ADDRESS,TEMP_OUT_H);
 340:	61 e4       	ldi	r22, 0x41	; 65
 342:	80 ed       	ldi	r24, 0xD0	; 208
 344:	43 df       	rcall	.-378    	; 0x1cc <I2C_read>
 346:	9d a3       	std	Y+37, r25	; 0x25
 348:	8c a3       	std	Y+36, r24	; 0x24
	buffer[19] = I2C_read(SLV_ADDRESS,TEMP_OUT_L);
 34a:	62 e4       	ldi	r22, 0x42	; 66
 34c:	80 ed       	ldi	r24, 0xD0	; 208
 34e:	3e df       	rcall	.-388    	; 0x1cc <I2C_read>
 350:	9f a3       	std	Y+39, r25	; 0x27
 352:	8e a3       	std	Y+38, r24	; 0x26
	buffer[15] = I2C_read(SLV_ADDRESS,EXT_SENS_DATA_05);
	buffer[16] = I2C_read(SLV_ADDRESS,EXT_SENS_DATA_06);
	buffer[17] = I2C_read(SLV_ADDRESS,EXT_SENS_DATA_07);*/
	//I2C_write(SLV_ADDRESS,INT_PIN_CFG, 0x00);// bypass enable
	
	ax = (buffer[0] << 8) + buffer[1];
 354:	40 e0       	ldi	r20, 0x00	; 0
 356:	50 e0       	ldi	r21, 0x00	; 0
 358:	58 81       	ld	r21, Y
 35a:	2a 81       	ldd	r18, Y+2	; 0x02
 35c:	3b 81       	ldd	r19, Y+3	; 0x03
 35e:	24 0f       	add	r18, r20
 360:	35 1f       	adc	r19, r21
 362:	30 93 14 01 	sts	0x0114, r19	; 0x800114 <ax+0x1>
 366:	20 93 13 01 	sts	0x0113, r18	; 0x800113 <ax>
	ay = (buffer[2] << 8) + buffer[3];
 36a:	40 e0       	ldi	r20, 0x00	; 0
 36c:	50 e0       	ldi	r21, 0x00	; 0
 36e:	5c 81       	ldd	r21, Y+4	; 0x04
 370:	2e 81       	ldd	r18, Y+6	; 0x06
 372:	3f 81       	ldd	r19, Y+7	; 0x07
 374:	24 0f       	add	r18, r20
 376:	35 1f       	adc	r19, r21
 378:	30 93 2e 05 	sts	0x052E, r19	; 0x80052e <ay+0x1>
 37c:	20 93 2d 05 	sts	0x052D, r18	; 0x80052d <ay>
	az = (buffer[4] << 8) + buffer[5];
 380:	40 e0       	ldi	r20, 0x00	; 0
 382:	50 e0       	ldi	r21, 0x00	; 0
 384:	58 85       	ldd	r21, Y+8	; 0x08
 386:	2a 85       	ldd	r18, Y+10	; 0x0a
 388:	3b 85       	ldd	r19, Y+11	; 0x0b
 38a:	24 0f       	add	r18, r20
 38c:	35 1f       	adc	r19, r21
 38e:	30 93 0b 01 	sts	0x010B, r19	; 0x80010b <az+0x1>
 392:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <az>
	gx = (buffer[6] << 8) + buffer[7];
 396:	40 e0       	ldi	r20, 0x00	; 0
 398:	50 e0       	ldi	r21, 0x00	; 0
 39a:	5c 85       	ldd	r21, Y+12	; 0x0c
 39c:	2e 85       	ldd	r18, Y+14	; 0x0e
 39e:	3f 85       	ldd	r19, Y+15	; 0x0f
 3a0:	42 0f       	add	r20, r18
 3a2:	53 1f       	adc	r21, r19
 3a4:	50 93 2c 05 	sts	0x052C, r21	; 0x80052c <gx+0x1>
 3a8:	40 93 2b 05 	sts	0x052B, r20	; 0x80052b <gx>
	gy = (buffer[8] << 8) + buffer[9];
 3ac:	60 e0       	ldi	r22, 0x00	; 0
 3ae:	70 e0       	ldi	r23, 0x00	; 0
 3b0:	78 89       	ldd	r23, Y+16	; 0x10
 3b2:	4a 89       	ldd	r20, Y+18	; 0x12
 3b4:	5b 89       	ldd	r21, Y+19	; 0x13
 3b6:	46 0f       	add	r20, r22
 3b8:	57 1f       	adc	r21, r23
 3ba:	50 93 09 01 	sts	0x0109, r21	; 0x800109 <gy+0x1>
 3be:	40 93 08 01 	sts	0x0108, r20	; 0x800108 <gy>
	gz = (buffer[10] << 8) + buffer[11];
 3c2:	60 e0       	ldi	r22, 0x00	; 0
 3c4:	70 e0       	ldi	r23, 0x00	; 0
 3c6:	7c 89       	ldd	r23, Y+20	; 0x14
 3c8:	4e 89       	ldd	r20, Y+22	; 0x16
 3ca:	5f 89       	ldd	r21, Y+23	; 0x17
 3cc:	46 0f       	add	r20, r22
 3ce:	57 1f       	adc	r21, r23
 3d0:	50 93 28 05 	sts	0x0528, r21	; 0x800528 <gz+0x1>
 3d4:	40 93 27 05 	sts	0x0527, r20	; 0x800527 <gz>
	ta = (buffer[18] << 8) + buffer[19];
 3d8:	20 e0       	ldi	r18, 0x00	; 0
 3da:	30 e0       	ldi	r19, 0x00	; 0
 3dc:	3c a1       	ldd	r19, Y+36	; 0x24
 3de:	28 0f       	add	r18, r24
 3e0:	39 1f       	adc	r19, r25
 3e2:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <ta+0x1>
 3e6:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <ta>
	/*mx = (buffer[12] << 8) + buffer[13];
	my = (buffer[14] << 8) + buffer[15];
	mz = (buffer[16] << 8) + buffer[17];*/
	
}
 3ea:	df 91       	pop	r29
 3ec:	cf 91       	pop	r28
 3ee:	08 95       	ret

000003f0 <convertRawData>:

void convertRawData(void)
{
	// Gyro
	gyro_x = gx/FS_SEL; // 65535/35.5/2 = 923.028
 3f0:	60 91 2b 05 	lds	r22, 0x052B	; 0x80052b <gx>
 3f4:	70 91 2c 05 	lds	r23, 0x052C	; 0x80052c <gx+0x1>
 3f8:	07 2e       	mov	r0, r23
 3fa:	00 0c       	add	r0, r0
 3fc:	88 0b       	sbc	r24, r24
 3fe:	99 0b       	sbc	r25, r25
 400:	29 d2       	rcall	.+1106   	; 0x854 <__floatsisf>
 402:	20 e0       	ldi	r18, 0x00	; 0
 404:	30 e0       	ldi	r19, 0x00	; 0
 406:	43 e8       	ldi	r20, 0x83	; 131
 408:	52 e4       	ldi	r21, 0x42	; 66
 40a:	89 d1       	rcall	.+786    	; 0x71e <__divsf3>
 40c:	f0 d1       	rcall	.+992    	; 0x7ee <__fixsfsi>
 40e:	70 93 26 05 	sts	0x0526, r23	; 0x800526 <gyro_x+0x1>
 412:	60 93 25 05 	sts	0x0525, r22	; 0x800525 <gyro_x>
	gyro_y = gy/FS_SEL;
 416:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <gy>
 41a:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <gy+0x1>
 41e:	07 2e       	mov	r0, r23
 420:	00 0c       	add	r0, r0
 422:	88 0b       	sbc	r24, r24
 424:	99 0b       	sbc	r25, r25
 426:	16 d2       	rcall	.+1068   	; 0x854 <__floatsisf>
 428:	20 e0       	ldi	r18, 0x00	; 0
 42a:	30 e0       	ldi	r19, 0x00	; 0
 42c:	43 e8       	ldi	r20, 0x83	; 131
 42e:	52 e4       	ldi	r21, 0x42	; 66
 430:	76 d1       	rcall	.+748    	; 0x71e <__divsf3>
 432:	dd d1       	rcall	.+954    	; 0x7ee <__fixsfsi>
 434:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <gyro_y+0x1>
 438:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <gyro_y>
	gyro_z = gz/FS_SEL;
 43c:	60 91 27 05 	lds	r22, 0x0527	; 0x800527 <gz>
 440:	70 91 28 05 	lds	r23, 0x0528	; 0x800528 <gz+0x1>
 444:	07 2e       	mov	r0, r23
 446:	00 0c       	add	r0, r0
 448:	88 0b       	sbc	r24, r24
 44a:	99 0b       	sbc	r25, r25
 44c:	03 d2       	rcall	.+1030   	; 0x854 <__floatsisf>
 44e:	20 e0       	ldi	r18, 0x00	; 0
 450:	30 e0       	ldi	r19, 0x00	; 0
 452:	43 e8       	ldi	r20, 0x83	; 131
 454:	52 e4       	ldi	r21, 0x42	; 66
 456:	63 d1       	rcall	.+710    	; 0x71e <__divsf3>
 458:	ca d1       	rcall	.+916    	; 0x7ee <__fixsfsi>
 45a:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <gyro_z+0x1>
 45e:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <gyro_z>
	
	// Accel
	accel_x = ax;
 462:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <ax>
 466:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <ax+0x1>
 46a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <accel_x+0x1>
 46e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <accel_x>
	accel_y = ay;
 472:	80 91 2d 05 	lds	r24, 0x052D	; 0x80052d <ay>
 476:	90 91 2e 05 	lds	r25, 0x052E	; 0x80052e <ay+0x1>
 47a:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <accel_y+0x1>
 47e:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <accel_y>
	accel_z = az;
 482:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <az>
 486:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <az+0x1>
 48a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 48e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 492:	08 95       	ret

00000494 <getDegree>:
}
void getDegree()
{
 494:	cf 92       	push	r12
 496:	df 92       	push	r13
 498:	ef 92       	push	r14
 49a:	ff 92       	push	r15
	getRawData();
 49c:	2f df       	rcall	.-418    	; 0x2fc <getRawData>
	convertRawData();
 49e:	a8 df       	rcall	.-176    	; 0x3f0 <convertRawData>
	angle_x = atan2(accel_x,accel_z)*180/M_PI;
 4a0:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <_edata>
 4a4:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <_edata+0x1>
 4a8:	07 2e       	mov	r0, r23
 4aa:	00 0c       	add	r0, r0
 4ac:	88 0b       	sbc	r24, r24
 4ae:	99 0b       	sbc	r25, r25
 4b0:	d1 d1       	rcall	.+930    	; 0x854 <__floatsisf>
 4b2:	6b 01       	movw	r12, r22
 4b4:	7c 01       	movw	r14, r24
 4b6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <accel_x>
 4ba:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <accel_x+0x1>
 4be:	bc 01       	movw	r22, r24
 4c0:	99 0f       	add	r25, r25
 4c2:	88 0b       	sbc	r24, r24
 4c4:	99 0b       	sbc	r25, r25
 4c6:	c6 d1       	rcall	.+908    	; 0x854 <__floatsisf>
 4c8:	a7 01       	movw	r20, r14
 4ca:	96 01       	movw	r18, r12
 4cc:	d5 d0       	rcall	.+426    	; 0x678 <atan2>
 4ce:	20 e0       	ldi	r18, 0x00	; 0
 4d0:	30 e0       	ldi	r19, 0x00	; 0
 4d2:	44 e3       	ldi	r20, 0x34	; 52
 4d4:	53 e4       	ldi	r21, 0x43	; 67
 4d6:	76 d2       	rcall	.+1260   	; 0x9c4 <__mulsf3>
 4d8:	2b ed       	ldi	r18, 0xDB	; 219
 4da:	3f e0       	ldi	r19, 0x0F	; 15
 4dc:	49 e4       	ldi	r20, 0x49	; 73
 4de:	50 e4       	ldi	r21, 0x40	; 64
 4e0:	1e d1       	rcall	.+572    	; 0x71e <__divsf3>
 4e2:	85 d1       	rcall	.+778    	; 0x7ee <__fixsfsi>
 4e4:	70 93 24 05 	sts	0x0524, r23	; 0x800524 <angle_x+0x1>
 4e8:	60 93 23 05 	sts	0x0523, r22	; 0x800523 <angle_x>
	angle_y = atan2(accel_y,accel_z)*180/M_PI;
 4ec:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <accel_y>
 4f0:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <accel_y+0x1>
 4f4:	bc 01       	movw	r22, r24
 4f6:	99 0f       	add	r25, r25
 4f8:	88 0b       	sbc	r24, r24
 4fa:	99 0b       	sbc	r25, r25
 4fc:	ab d1       	rcall	.+854    	; 0x854 <__floatsisf>
 4fe:	a7 01       	movw	r20, r14
 500:	96 01       	movw	r18, r12
 502:	ba d0       	rcall	.+372    	; 0x678 <atan2>
 504:	20 e0       	ldi	r18, 0x00	; 0
 506:	30 e0       	ldi	r19, 0x00	; 0
 508:	44 e3       	ldi	r20, 0x34	; 52
 50a:	53 e4       	ldi	r21, 0x43	; 67
 50c:	5b d2       	rcall	.+1206   	; 0x9c4 <__mulsf3>
 50e:	2b ed       	ldi	r18, 0xDB	; 219
 510:	3f e0       	ldi	r19, 0x0F	; 15
 512:	49 e4       	ldi	r20, 0x49	; 73
 514:	50 e4       	ldi	r21, 0x40	; 64
 516:	03 d1       	rcall	.+518    	; 0x71e <__divsf3>
 518:	6a d1       	rcall	.+724    	; 0x7ee <__fixsfsi>
 51a:	70 93 16 01 	sts	0x0116, r23	; 0x800116 <angle_y+0x1>
 51e:	60 93 15 01 	sts	0x0115, r22	; 0x800115 <angle_y>
}
 522:	ff 90       	pop	r15
 524:	ef 90       	pop	r14
 526:	df 90       	pop	r13
 528:	cf 90       	pop	r12
 52a:	08 95       	ret

0000052c <mpu9150_initialize>:

void mpu9150_initialize()
{
	I2C_write(SLV_ADDRESS,PWR_MGMT_1,0x00);// 0x6b,0x6c 레지스터에 0x00값을 넣어줘야 센서 ON!
 52c:	40 e0       	ldi	r20, 0x00	; 0
 52e:	6b e6       	ldi	r22, 0x6B	; 107
 530:	80 ed       	ldi	r24, 0xD0	; 208
 532:	dd dd       	rcall	.-1094   	; 0xee <I2C_write>
	I2C_write(SLV_ADDRESS,PWR_MGMT_2,0x00);
 534:	40 e0       	ldi	r20, 0x00	; 0
 536:	6c e6       	ldi	r22, 0x6C	; 108
 538:	80 ed       	ldi	r24, 0xD0	; 208
 53a:	d9 dd       	rcall	.-1102   	; 0xee <I2C_write>
	I2C_write(SLV_ADDRESS,GYRO_CONFIG,0x08);// gyro 설정, 최대 500도/s로 설정
 53c:	48 e0       	ldi	r20, 0x08	; 8
 53e:	6b e1       	ldi	r22, 0x1B	; 27
 540:	80 ed       	ldi	r24, 0xD0	; 208
 542:	d5 dd       	rcall	.-1110   	; 0xee <I2C_write>
	I2C_write(SLV_ADDRESS,ACCEL_CONFIG,0x08);// accel 설정, 최대 4g 로 설정
 544:	48 e0       	ldi	r20, 0x08	; 8
 546:	6c e1       	ldi	r22, 0x1C	; 28
 548:	80 ed       	ldi	r24, 0xD0	; 208
 54a:	d1 cd       	rjmp	.-1118   	; 0xee <I2C_write>
 54c:	08 95       	ret

0000054e <main>:
unsigned char str1[1000];
unsigned char turn;
int main(void)
{
	
	init_devices();
 54e:	c6 dd       	rcall	.-1140   	; 0xdc <init_devices>
	mpu9150_initialize();
 550:	ed df       	rcall	.-38     	; 0x52c <mpu9150_initialize>
	DDRA = 0xff;
 552:	8f ef       	ldi	r24, 0xFF	; 255
 554:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x00;
 556:	1b ba       	out	0x1b, r1	; 27
	DDRB = 0xff;
 558:	87 bb       	out	0x17, r24	; 23
	PORTB = 0xff;
 55a:	88 bb       	out	0x18, r24	; 24
				_delay_ms(500);
				PORTB = 0xFF;
			}
			else
			{
				PORTB = 0xFB;	//3색 LED 파랑
 55c:	0b ef       	ldi	r16, 0xFB	; 251
				_delay_ms(500);
				PORTB = 0xFF;
 55e:	cf ef       	ldi	r28, 0xFF	; 255
				_delay_ms(500);
				PORTB = 0xFF;
			}
			else if((abs(ta)>=3000))
			{
				PORTB = 0xFD;	//3색 LED 초록
 560:	1d ef       	ldi	r17, 0xFD	; 253
				_delay_ms(500);
				PORTA = 0x00;
			}
			if((abs(ta)>=5000))
			{
				PORTB = 0xFE;	//3색 LED 빨강
 562:	0f 2e       	mov	r0, r31
 564:	fe ef       	ldi	r31, 0xFE	; 254
 566:	ff 2e       	mov	r15, r31
 568:	f0 2d       	mov	r31, r0
	
		if(turn == 10)
		{
			if((abs(gx)>=1000)||(abs(gy)>=1000)||(abs(gz)>=1000))
			{
				PORTA = 0x01;
 56a:	d1 e0       	ldi	r29, 0x01	; 1
	PORTB = 0xff;
	
	while(1){
		
		
		getDegree();
 56c:	93 df       	rcall	.-218    	; 0x494 <getDegree>
 56e:	2f ef       	ldi	r18, 0xFF	; 255
 570:	89 ef       	ldi	r24, 0xF9	; 249
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	21 50       	subi	r18, 0x01	; 1
 576:	80 40       	sbci	r24, 0x00	; 0
 578:	90 40       	sbci	r25, 0x00	; 0
 57a:	e1 f7       	brne	.-8      	; 0x574 <main+0x26>
 57c:	00 c0       	rjmp	.+0      	; 0x57e <main+0x30>
 57e:	00 00       	nop
		_delay_ms(20);
	
		if(turn == 10)
 580:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <turn>
 584:	8a 30       	cpi	r24, 0x0A	; 10
 586:	09 f0       	breq	.+2      	; 0x58a <main+0x3c>
 588:	62 c0       	rjmp	.+196    	; 0x64e <main+0x100>
		{
			if((abs(gx)>=1000)||(abs(gy)>=1000)||(abs(gz)>=1000))
 58a:	80 91 2b 05 	lds	r24, 0x052B	; 0x80052b <gx>
 58e:	90 91 2c 05 	lds	r25, 0x052C	; 0x80052c <gx+0x1>
 592:	99 23       	and	r25, r25
 594:	1c f4       	brge	.+6      	; 0x59c <main+0x4e>
 596:	91 95       	neg	r25
 598:	81 95       	neg	r24
 59a:	91 09       	sbc	r25, r1
 59c:	88 3e       	cpi	r24, 0xE8	; 232
 59e:	93 40       	sbci	r25, 0x03	; 3
 5a0:	c4 f4       	brge	.+48     	; 0x5d2 <main+0x84>
 5a2:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <gy>
 5a6:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <gy+0x1>
 5aa:	99 23       	and	r25, r25
 5ac:	1c f4       	brge	.+6      	; 0x5b4 <main+0x66>
 5ae:	91 95       	neg	r25
 5b0:	81 95       	neg	r24
 5b2:	91 09       	sbc	r25, r1
 5b4:	88 3e       	cpi	r24, 0xE8	; 232
 5b6:	93 40       	sbci	r25, 0x03	; 3
 5b8:	64 f4       	brge	.+24     	; 0x5d2 <main+0x84>
 5ba:	80 91 27 05 	lds	r24, 0x0527	; 0x800527 <gz>
 5be:	90 91 28 05 	lds	r25, 0x0528	; 0x800528 <gz+0x1>
 5c2:	99 23       	and	r25, r25
 5c4:	1c f4       	brge	.+6      	; 0x5cc <main+0x7e>
 5c6:	91 95       	neg	r25
 5c8:	81 95       	neg	r24
 5ca:	91 09       	sbc	r25, r1
 5cc:	88 3e       	cpi	r24, 0xE8	; 232
 5ce:	93 40       	sbci	r25, 0x03	; 3
 5d0:	5c f0       	brlt	.+22     	; 0x5e8 <main+0x9a>
			{
				PORTA = 0x01;
 5d2:	db bb       	out	0x1b, r29	; 27
 5d4:	8f ef       	ldi	r24, 0xFF	; 255
 5d6:	99 e6       	ldi	r25, 0x69	; 105
 5d8:	28 e1       	ldi	r18, 0x18	; 24
 5da:	81 50       	subi	r24, 0x01	; 1
 5dc:	90 40       	sbci	r25, 0x00	; 0
 5de:	20 40       	sbci	r18, 0x00	; 0
 5e0:	e1 f7       	brne	.-8      	; 0x5da <main+0x8c>
 5e2:	00 c0       	rjmp	.+0      	; 0x5e4 <main+0x96>
 5e4:	00 00       	nop
				_delay_ms(500);
				PORTA = 0x00;
 5e6:	1b ba       	out	0x1b, r1	; 27
			}
			if((abs(ta)>=5000))
 5e8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <ta>
 5ec:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <ta+0x1>
 5f0:	99 23       	and	r25, r25
 5f2:	1c f4       	brge	.+6      	; 0x5fa <main+0xac>
 5f4:	91 95       	neg	r25
 5f6:	81 95       	neg	r24
 5f8:	91 09       	sbc	r25, r1
 5fa:	88 38       	cpi	r24, 0x88	; 136
 5fc:	23 e1       	ldi	r18, 0x13	; 19
 5fe:	92 07       	cpc	r25, r18
 600:	64 f0       	brlt	.+24     	; 0x61a <main+0xcc>
			{
				PORTB = 0xFE;	//3색 LED 빨강
 602:	f8 ba       	out	0x18, r15	; 24
 604:	8f ef       	ldi	r24, 0xFF	; 255
 606:	99 e6       	ldi	r25, 0x69	; 105
 608:	28 e1       	ldi	r18, 0x18	; 24
 60a:	81 50       	subi	r24, 0x01	; 1
 60c:	90 40       	sbci	r25, 0x00	; 0
 60e:	20 40       	sbci	r18, 0x00	; 0
 610:	e1 f7       	brne	.-8      	; 0x60a <main+0xbc>
 612:	00 c0       	rjmp	.+0      	; 0x614 <main+0xc6>
 614:	00 00       	nop
				_delay_ms(500);
				PORTB = 0xFF;
 616:	c8 bb       	out	0x18, r28	; 24
 618:	1a c0       	rjmp	.+52     	; 0x64e <main+0x100>
			}
			else if((abs(ta)>=3000))
 61a:	88 3b       	cpi	r24, 0xB8	; 184
 61c:	9b 40       	sbci	r25, 0x0B	; 11
 61e:	64 f0       	brlt	.+24     	; 0x638 <main+0xea>
			{
				PORTB = 0xFD;	//3색 LED 초록
 620:	18 bb       	out	0x18, r17	; 24
 622:	8f ef       	ldi	r24, 0xFF	; 255
 624:	99 e6       	ldi	r25, 0x69	; 105
 626:	28 e1       	ldi	r18, 0x18	; 24
 628:	81 50       	subi	r24, 0x01	; 1
 62a:	90 40       	sbci	r25, 0x00	; 0
 62c:	20 40       	sbci	r18, 0x00	; 0
 62e:	e1 f7       	brne	.-8      	; 0x628 <main+0xda>
 630:	00 c0       	rjmp	.+0      	; 0x632 <main+0xe4>
 632:	00 00       	nop
				_delay_ms(500);
				PORTB = 0xFF;
 634:	c8 bb       	out	0x18, r28	; 24
 636:	0b c0       	rjmp	.+22     	; 0x64e <main+0x100>
			}
			else
			{
				PORTB = 0xFB;	//3색 LED 파랑
 638:	08 bb       	out	0x18, r16	; 24
 63a:	8f ef       	ldi	r24, 0xFF	; 255
 63c:	99 e6       	ldi	r25, 0x69	; 105
 63e:	28 e1       	ldi	r18, 0x18	; 24
 640:	81 50       	subi	r24, 0x01	; 1
 642:	90 40       	sbci	r25, 0x00	; 0
 644:	20 40       	sbci	r18, 0x00	; 0
 646:	e1 f7       	brne	.-8      	; 0x640 <main+0xf2>
 648:	00 c0       	rjmp	.+0      	; 0x64a <main+0xfc>
 64a:	00 00       	nop
				_delay_ms(500);
				PORTB = 0xFF;
 64c:	c8 bb       	out	0x18, r28	; 24
			}
		}
		
		turn ++;
 64e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <turn>
 652:	8f 5f       	subi	r24, 0xFF	; 255
 654:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <turn>
	}
 658:	89 cf       	rjmp	.-238    	; 0x56c <main+0x1e>
 65a:	65 d1       	rcall	.+714    	; 0x926 <__fp_pscA>
 65c:	58 f0       	brcs	.+22     	; 0x674 <main+0x126>
 65e:	80 e8       	ldi	r24, 0x80	; 128
 660:	91 e0       	ldi	r25, 0x01	; 1
 662:	09 f4       	brne	.+2      	; 0x666 <main+0x118>
 664:	9e ef       	ldi	r25, 0xFE	; 254
 666:	66 d1       	rcall	.+716    	; 0x934 <__fp_pscB>
 668:	28 f0       	brcs	.+10     	; 0x674 <main+0x126>
 66a:	40 e8       	ldi	r20, 0x80	; 128
 66c:	51 e0       	ldi	r21, 0x01	; 1
 66e:	59 f4       	brne	.+22     	; 0x686 <atan2+0xe>
 670:	5e ef       	ldi	r21, 0xFE	; 254
 672:	09 c0       	rjmp	.+18     	; 0x686 <atan2+0xe>
 674:	30 c1       	rjmp	.+608    	; 0x8d6 <__fp_nan>
 676:	98 c1       	rjmp	.+816    	; 0x9a8 <__fp_zero>

00000678 <atan2>:
 678:	e9 2f       	mov	r30, r25
 67a:	e0 78       	andi	r30, 0x80	; 128
 67c:	73 d1       	rcall	.+742    	; 0x964 <__fp_split3>
 67e:	68 f3       	brcs	.-38     	; 0x65a <main+0x10c>
 680:	09 2e       	mov	r0, r25
 682:	05 2a       	or	r0, r21
 684:	c1 f3       	breq	.-16     	; 0x676 <main+0x128>
 686:	26 17       	cp	r18, r22
 688:	37 07       	cpc	r19, r23
 68a:	48 07       	cpc	r20, r24
 68c:	59 07       	cpc	r21, r25
 68e:	38 f0       	brcs	.+14     	; 0x69e <atan2+0x26>
 690:	0e 2e       	mov	r0, r30
 692:	07 f8       	bld	r0, 7
 694:	e0 25       	eor	r30, r0
 696:	69 f0       	breq	.+26     	; 0x6b2 <atan2+0x3a>
 698:	e0 25       	eor	r30, r0
 69a:	e0 64       	ori	r30, 0x40	; 64
 69c:	0a c0       	rjmp	.+20     	; 0x6b2 <atan2+0x3a>
 69e:	ef 63       	ori	r30, 0x3F	; 63
 6a0:	07 f8       	bld	r0, 7
 6a2:	00 94       	com	r0
 6a4:	07 fa       	bst	r0, 7
 6a6:	db 01       	movw	r26, r22
 6a8:	b9 01       	movw	r22, r18
 6aa:	9d 01       	movw	r18, r26
 6ac:	dc 01       	movw	r26, r24
 6ae:	ca 01       	movw	r24, r20
 6b0:	ad 01       	movw	r20, r26
 6b2:	ef 93       	push	r30
 6b4:	43 d0       	rcall	.+134    	; 0x73c <__divsf3_pse>
 6b6:	45 d1       	rcall	.+650    	; 0x942 <__fp_round>
 6b8:	0a d0       	rcall	.+20     	; 0x6ce <atan>
 6ba:	5f 91       	pop	r21
 6bc:	55 23       	and	r21, r21
 6be:	31 f0       	breq	.+12     	; 0x6cc <atan2+0x54>
 6c0:	2b ed       	ldi	r18, 0xDB	; 219
 6c2:	3f e0       	ldi	r19, 0x0F	; 15
 6c4:	49 e4       	ldi	r20, 0x49	; 73
 6c6:	50 fd       	sbrc	r21, 0
 6c8:	49 ec       	ldi	r20, 0xC9	; 201
 6ca:	e3 c1       	rjmp	.+966    	; 0xa92 <__addsf3>
 6cc:	08 95       	ret

000006ce <atan>:
 6ce:	df 93       	push	r29
 6d0:	dd 27       	eor	r29, r29
 6d2:	b9 2f       	mov	r27, r25
 6d4:	bf 77       	andi	r27, 0x7F	; 127
 6d6:	40 e8       	ldi	r20, 0x80	; 128
 6d8:	5f e3       	ldi	r21, 0x3F	; 63
 6da:	16 16       	cp	r1, r22
 6dc:	17 06       	cpc	r1, r23
 6de:	48 07       	cpc	r20, r24
 6e0:	5b 07       	cpc	r21, r27
 6e2:	10 f4       	brcc	.+4      	; 0x6e8 <atan+0x1a>
 6e4:	d9 2f       	mov	r29, r25
 6e6:	67 d1       	rcall	.+718    	; 0x9b6 <inverse>
 6e8:	9f 93       	push	r25
 6ea:	8f 93       	push	r24
 6ec:	7f 93       	push	r23
 6ee:	6f 93       	push	r22
 6f0:	cc d1       	rcall	.+920    	; 0xa8a <square>
 6f2:	ec e8       	ldi	r30, 0x8C	; 140
 6f4:	f0 e0       	ldi	r31, 0x00	; 0
 6f6:	f2 d0       	rcall	.+484    	; 0x8dc <__fp_powser>
 6f8:	24 d1       	rcall	.+584    	; 0x942 <__fp_round>
 6fa:	2f 91       	pop	r18
 6fc:	3f 91       	pop	r19
 6fe:	4f 91       	pop	r20
 700:	5f 91       	pop	r21
 702:	6c d1       	rcall	.+728    	; 0x9dc <__mulsf3x>
 704:	dd 23       	and	r29, r29
 706:	49 f0       	breq	.+18     	; 0x71a <atan+0x4c>
 708:	90 58       	subi	r25, 0x80	; 128
 70a:	a2 ea       	ldi	r26, 0xA2	; 162
 70c:	2a ed       	ldi	r18, 0xDA	; 218
 70e:	3f e0       	ldi	r19, 0x0F	; 15
 710:	49 ec       	ldi	r20, 0xC9	; 201
 712:	5f e3       	ldi	r21, 0x3F	; 63
 714:	d0 78       	andi	r29, 0x80	; 128
 716:	5d 27       	eor	r21, r29
 718:	cd d1       	rcall	.+922    	; 0xab4 <__addsf3x>
 71a:	df 91       	pop	r29
 71c:	12 c1       	rjmp	.+548    	; 0x942 <__fp_round>

0000071e <__divsf3>:
 71e:	0c d0       	rcall	.+24     	; 0x738 <__divsf3x>
 720:	10 c1       	rjmp	.+544    	; 0x942 <__fp_round>
 722:	08 d1       	rcall	.+528    	; 0x934 <__fp_pscB>
 724:	40 f0       	brcs	.+16     	; 0x736 <__divsf3+0x18>
 726:	ff d0       	rcall	.+510    	; 0x926 <__fp_pscA>
 728:	30 f0       	brcs	.+12     	; 0x736 <__divsf3+0x18>
 72a:	21 f4       	brne	.+8      	; 0x734 <__divsf3+0x16>
 72c:	5f 3f       	cpi	r21, 0xFF	; 255
 72e:	19 f0       	breq	.+6      	; 0x736 <__divsf3+0x18>
 730:	cc c0       	rjmp	.+408    	; 0x8ca <__fp_inf>
 732:	51 11       	cpse	r21, r1
 734:	3a c1       	rjmp	.+628    	; 0x9aa <__fp_szero>
 736:	cf c0       	rjmp	.+414    	; 0x8d6 <__fp_nan>

00000738 <__divsf3x>:
 738:	15 d1       	rcall	.+554    	; 0x964 <__fp_split3>
 73a:	98 f3       	brcs	.-26     	; 0x722 <__divsf3+0x4>

0000073c <__divsf3_pse>:
 73c:	99 23       	and	r25, r25
 73e:	c9 f3       	breq	.-14     	; 0x732 <__divsf3+0x14>
 740:	55 23       	and	r21, r21
 742:	b1 f3       	breq	.-20     	; 0x730 <__divsf3+0x12>
 744:	95 1b       	sub	r25, r21
 746:	55 0b       	sbc	r21, r21
 748:	bb 27       	eor	r27, r27
 74a:	aa 27       	eor	r26, r26
 74c:	62 17       	cp	r22, r18
 74e:	73 07       	cpc	r23, r19
 750:	84 07       	cpc	r24, r20
 752:	38 f0       	brcs	.+14     	; 0x762 <__divsf3_pse+0x26>
 754:	9f 5f       	subi	r25, 0xFF	; 255
 756:	5f 4f       	sbci	r21, 0xFF	; 255
 758:	22 0f       	add	r18, r18
 75a:	33 1f       	adc	r19, r19
 75c:	44 1f       	adc	r20, r20
 75e:	aa 1f       	adc	r26, r26
 760:	a9 f3       	breq	.-22     	; 0x74c <__divsf3_pse+0x10>
 762:	33 d0       	rcall	.+102    	; 0x7ca <__divsf3_pse+0x8e>
 764:	0e 2e       	mov	r0, r30
 766:	3a f0       	brmi	.+14     	; 0x776 <__divsf3_pse+0x3a>
 768:	e0 e8       	ldi	r30, 0x80	; 128
 76a:	30 d0       	rcall	.+96     	; 0x7cc <__divsf3_pse+0x90>
 76c:	91 50       	subi	r25, 0x01	; 1
 76e:	50 40       	sbci	r21, 0x00	; 0
 770:	e6 95       	lsr	r30
 772:	00 1c       	adc	r0, r0
 774:	ca f7       	brpl	.-14     	; 0x768 <__divsf3_pse+0x2c>
 776:	29 d0       	rcall	.+82     	; 0x7ca <__divsf3_pse+0x8e>
 778:	fe 2f       	mov	r31, r30
 77a:	27 d0       	rcall	.+78     	; 0x7ca <__divsf3_pse+0x8e>
 77c:	66 0f       	add	r22, r22
 77e:	77 1f       	adc	r23, r23
 780:	88 1f       	adc	r24, r24
 782:	bb 1f       	adc	r27, r27
 784:	26 17       	cp	r18, r22
 786:	37 07       	cpc	r19, r23
 788:	48 07       	cpc	r20, r24
 78a:	ab 07       	cpc	r26, r27
 78c:	b0 e8       	ldi	r27, 0x80	; 128
 78e:	09 f0       	breq	.+2      	; 0x792 <__divsf3_pse+0x56>
 790:	bb 0b       	sbc	r27, r27
 792:	80 2d       	mov	r24, r0
 794:	bf 01       	movw	r22, r30
 796:	ff 27       	eor	r31, r31
 798:	93 58       	subi	r25, 0x83	; 131
 79a:	5f 4f       	sbci	r21, 0xFF	; 255
 79c:	2a f0       	brmi	.+10     	; 0x7a8 <__divsf3_pse+0x6c>
 79e:	9e 3f       	cpi	r25, 0xFE	; 254
 7a0:	51 05       	cpc	r21, r1
 7a2:	68 f0       	brcs	.+26     	; 0x7be <__divsf3_pse+0x82>
 7a4:	92 c0       	rjmp	.+292    	; 0x8ca <__fp_inf>
 7a6:	01 c1       	rjmp	.+514    	; 0x9aa <__fp_szero>
 7a8:	5f 3f       	cpi	r21, 0xFF	; 255
 7aa:	ec f3       	brlt	.-6      	; 0x7a6 <__divsf3_pse+0x6a>
 7ac:	98 3e       	cpi	r25, 0xE8	; 232
 7ae:	dc f3       	brlt	.-10     	; 0x7a6 <__divsf3_pse+0x6a>
 7b0:	86 95       	lsr	r24
 7b2:	77 95       	ror	r23
 7b4:	67 95       	ror	r22
 7b6:	b7 95       	ror	r27
 7b8:	f7 95       	ror	r31
 7ba:	9f 5f       	subi	r25, 0xFF	; 255
 7bc:	c9 f7       	brne	.-14     	; 0x7b0 <__divsf3_pse+0x74>
 7be:	88 0f       	add	r24, r24
 7c0:	91 1d       	adc	r25, r1
 7c2:	96 95       	lsr	r25
 7c4:	87 95       	ror	r24
 7c6:	97 f9       	bld	r25, 7
 7c8:	08 95       	ret
 7ca:	e1 e0       	ldi	r30, 0x01	; 1
 7cc:	66 0f       	add	r22, r22
 7ce:	77 1f       	adc	r23, r23
 7d0:	88 1f       	adc	r24, r24
 7d2:	bb 1f       	adc	r27, r27
 7d4:	62 17       	cp	r22, r18
 7d6:	73 07       	cpc	r23, r19
 7d8:	84 07       	cpc	r24, r20
 7da:	ba 07       	cpc	r27, r26
 7dc:	20 f0       	brcs	.+8      	; 0x7e6 <__divsf3_pse+0xaa>
 7de:	62 1b       	sub	r22, r18
 7e0:	73 0b       	sbc	r23, r19
 7e2:	84 0b       	sbc	r24, r20
 7e4:	ba 0b       	sbc	r27, r26
 7e6:	ee 1f       	adc	r30, r30
 7e8:	88 f7       	brcc	.-30     	; 0x7cc <__divsf3_pse+0x90>
 7ea:	e0 95       	com	r30
 7ec:	08 95       	ret

000007ee <__fixsfsi>:
 7ee:	04 d0       	rcall	.+8      	; 0x7f8 <__fixunssfsi>
 7f0:	68 94       	set
 7f2:	b1 11       	cpse	r27, r1
 7f4:	da c0       	rjmp	.+436    	; 0x9aa <__fp_szero>
 7f6:	08 95       	ret

000007f8 <__fixunssfsi>:
 7f8:	bd d0       	rcall	.+378    	; 0x974 <__fp_splitA>
 7fa:	88 f0       	brcs	.+34     	; 0x81e <__fixunssfsi+0x26>
 7fc:	9f 57       	subi	r25, 0x7F	; 127
 7fe:	90 f0       	brcs	.+36     	; 0x824 <__fixunssfsi+0x2c>
 800:	b9 2f       	mov	r27, r25
 802:	99 27       	eor	r25, r25
 804:	b7 51       	subi	r27, 0x17	; 23
 806:	a0 f0       	brcs	.+40     	; 0x830 <__fixunssfsi+0x38>
 808:	d1 f0       	breq	.+52     	; 0x83e <__fixunssfsi+0x46>
 80a:	66 0f       	add	r22, r22
 80c:	77 1f       	adc	r23, r23
 80e:	88 1f       	adc	r24, r24
 810:	99 1f       	adc	r25, r25
 812:	1a f0       	brmi	.+6      	; 0x81a <__fixunssfsi+0x22>
 814:	ba 95       	dec	r27
 816:	c9 f7       	brne	.-14     	; 0x80a <__fixunssfsi+0x12>
 818:	12 c0       	rjmp	.+36     	; 0x83e <__fixunssfsi+0x46>
 81a:	b1 30       	cpi	r27, 0x01	; 1
 81c:	81 f0       	breq	.+32     	; 0x83e <__fixunssfsi+0x46>
 81e:	c4 d0       	rcall	.+392    	; 0x9a8 <__fp_zero>
 820:	b1 e0       	ldi	r27, 0x01	; 1
 822:	08 95       	ret
 824:	c1 c0       	rjmp	.+386    	; 0x9a8 <__fp_zero>
 826:	67 2f       	mov	r22, r23
 828:	78 2f       	mov	r23, r24
 82a:	88 27       	eor	r24, r24
 82c:	b8 5f       	subi	r27, 0xF8	; 248
 82e:	39 f0       	breq	.+14     	; 0x83e <__fixunssfsi+0x46>
 830:	b9 3f       	cpi	r27, 0xF9	; 249
 832:	cc f3       	brlt	.-14     	; 0x826 <__fixunssfsi+0x2e>
 834:	86 95       	lsr	r24
 836:	77 95       	ror	r23
 838:	67 95       	ror	r22
 83a:	b3 95       	inc	r27
 83c:	d9 f7       	brne	.-10     	; 0x834 <__fixunssfsi+0x3c>
 83e:	3e f4       	brtc	.+14     	; 0x84e <__fixunssfsi+0x56>
 840:	90 95       	com	r25
 842:	80 95       	com	r24
 844:	70 95       	com	r23
 846:	61 95       	neg	r22
 848:	7f 4f       	sbci	r23, 0xFF	; 255
 84a:	8f 4f       	sbci	r24, 0xFF	; 255
 84c:	9f 4f       	sbci	r25, 0xFF	; 255
 84e:	08 95       	ret

00000850 <__floatunsisf>:
 850:	e8 94       	clt
 852:	09 c0       	rjmp	.+18     	; 0x866 <__floatsisf+0x12>

00000854 <__floatsisf>:
 854:	97 fb       	bst	r25, 7
 856:	3e f4       	brtc	.+14     	; 0x866 <__floatsisf+0x12>
 858:	90 95       	com	r25
 85a:	80 95       	com	r24
 85c:	70 95       	com	r23
 85e:	61 95       	neg	r22
 860:	7f 4f       	sbci	r23, 0xFF	; 255
 862:	8f 4f       	sbci	r24, 0xFF	; 255
 864:	9f 4f       	sbci	r25, 0xFF	; 255
 866:	99 23       	and	r25, r25
 868:	a9 f0       	breq	.+42     	; 0x894 <__floatsisf+0x40>
 86a:	f9 2f       	mov	r31, r25
 86c:	96 e9       	ldi	r25, 0x96	; 150
 86e:	bb 27       	eor	r27, r27
 870:	93 95       	inc	r25
 872:	f6 95       	lsr	r31
 874:	87 95       	ror	r24
 876:	77 95       	ror	r23
 878:	67 95       	ror	r22
 87a:	b7 95       	ror	r27
 87c:	f1 11       	cpse	r31, r1
 87e:	f8 cf       	rjmp	.-16     	; 0x870 <__floatsisf+0x1c>
 880:	fa f4       	brpl	.+62     	; 0x8c0 <__floatsisf+0x6c>
 882:	bb 0f       	add	r27, r27
 884:	11 f4       	brne	.+4      	; 0x88a <__floatsisf+0x36>
 886:	60 ff       	sbrs	r22, 0
 888:	1b c0       	rjmp	.+54     	; 0x8c0 <__floatsisf+0x6c>
 88a:	6f 5f       	subi	r22, 0xFF	; 255
 88c:	7f 4f       	sbci	r23, 0xFF	; 255
 88e:	8f 4f       	sbci	r24, 0xFF	; 255
 890:	9f 4f       	sbci	r25, 0xFF	; 255
 892:	16 c0       	rjmp	.+44     	; 0x8c0 <__floatsisf+0x6c>
 894:	88 23       	and	r24, r24
 896:	11 f0       	breq	.+4      	; 0x89c <__floatsisf+0x48>
 898:	96 e9       	ldi	r25, 0x96	; 150
 89a:	11 c0       	rjmp	.+34     	; 0x8be <__floatsisf+0x6a>
 89c:	77 23       	and	r23, r23
 89e:	21 f0       	breq	.+8      	; 0x8a8 <__floatsisf+0x54>
 8a0:	9e e8       	ldi	r25, 0x8E	; 142
 8a2:	87 2f       	mov	r24, r23
 8a4:	76 2f       	mov	r23, r22
 8a6:	05 c0       	rjmp	.+10     	; 0x8b2 <__floatsisf+0x5e>
 8a8:	66 23       	and	r22, r22
 8aa:	71 f0       	breq	.+28     	; 0x8c8 <__floatsisf+0x74>
 8ac:	96 e8       	ldi	r25, 0x86	; 134
 8ae:	86 2f       	mov	r24, r22
 8b0:	70 e0       	ldi	r23, 0x00	; 0
 8b2:	60 e0       	ldi	r22, 0x00	; 0
 8b4:	2a f0       	brmi	.+10     	; 0x8c0 <__floatsisf+0x6c>
 8b6:	9a 95       	dec	r25
 8b8:	66 0f       	add	r22, r22
 8ba:	77 1f       	adc	r23, r23
 8bc:	88 1f       	adc	r24, r24
 8be:	da f7       	brpl	.-10     	; 0x8b6 <__floatsisf+0x62>
 8c0:	88 0f       	add	r24, r24
 8c2:	96 95       	lsr	r25
 8c4:	87 95       	ror	r24
 8c6:	97 f9       	bld	r25, 7
 8c8:	08 95       	ret

000008ca <__fp_inf>:
 8ca:	97 f9       	bld	r25, 7
 8cc:	9f 67       	ori	r25, 0x7F	; 127
 8ce:	80 e8       	ldi	r24, 0x80	; 128
 8d0:	70 e0       	ldi	r23, 0x00	; 0
 8d2:	60 e0       	ldi	r22, 0x00	; 0
 8d4:	08 95       	ret

000008d6 <__fp_nan>:
 8d6:	9f ef       	ldi	r25, 0xFF	; 255
 8d8:	80 ec       	ldi	r24, 0xC0	; 192
 8da:	08 95       	ret

000008dc <__fp_powser>:
 8dc:	df 93       	push	r29
 8de:	cf 93       	push	r28
 8e0:	1f 93       	push	r17
 8e2:	0f 93       	push	r16
 8e4:	ff 92       	push	r15
 8e6:	ef 92       	push	r14
 8e8:	df 92       	push	r13
 8ea:	7b 01       	movw	r14, r22
 8ec:	8c 01       	movw	r16, r24
 8ee:	68 94       	set
 8f0:	05 c0       	rjmp	.+10     	; 0x8fc <__fp_powser+0x20>
 8f2:	da 2e       	mov	r13, r26
 8f4:	ef 01       	movw	r28, r30
 8f6:	72 d0       	rcall	.+228    	; 0x9dc <__mulsf3x>
 8f8:	fe 01       	movw	r30, r28
 8fa:	e8 94       	clt
 8fc:	a5 91       	lpm	r26, Z+
 8fe:	25 91       	lpm	r18, Z+
 900:	35 91       	lpm	r19, Z+
 902:	45 91       	lpm	r20, Z+
 904:	55 91       	lpm	r21, Z+
 906:	ae f3       	brts	.-22     	; 0x8f2 <__fp_powser+0x16>
 908:	ef 01       	movw	r28, r30
 90a:	d4 d0       	rcall	.+424    	; 0xab4 <__addsf3x>
 90c:	fe 01       	movw	r30, r28
 90e:	97 01       	movw	r18, r14
 910:	a8 01       	movw	r20, r16
 912:	da 94       	dec	r13
 914:	79 f7       	brne	.-34     	; 0x8f4 <__fp_powser+0x18>
 916:	df 90       	pop	r13
 918:	ef 90       	pop	r14
 91a:	ff 90       	pop	r15
 91c:	0f 91       	pop	r16
 91e:	1f 91       	pop	r17
 920:	cf 91       	pop	r28
 922:	df 91       	pop	r29
 924:	08 95       	ret

00000926 <__fp_pscA>:
 926:	00 24       	eor	r0, r0
 928:	0a 94       	dec	r0
 92a:	16 16       	cp	r1, r22
 92c:	17 06       	cpc	r1, r23
 92e:	18 06       	cpc	r1, r24
 930:	09 06       	cpc	r0, r25
 932:	08 95       	ret

00000934 <__fp_pscB>:
 934:	00 24       	eor	r0, r0
 936:	0a 94       	dec	r0
 938:	12 16       	cp	r1, r18
 93a:	13 06       	cpc	r1, r19
 93c:	14 06       	cpc	r1, r20
 93e:	05 06       	cpc	r0, r21
 940:	08 95       	ret

00000942 <__fp_round>:
 942:	09 2e       	mov	r0, r25
 944:	03 94       	inc	r0
 946:	00 0c       	add	r0, r0
 948:	11 f4       	brne	.+4      	; 0x94e <__fp_round+0xc>
 94a:	88 23       	and	r24, r24
 94c:	52 f0       	brmi	.+20     	; 0x962 <__fp_round+0x20>
 94e:	bb 0f       	add	r27, r27
 950:	40 f4       	brcc	.+16     	; 0x962 <__fp_round+0x20>
 952:	bf 2b       	or	r27, r31
 954:	11 f4       	brne	.+4      	; 0x95a <__fp_round+0x18>
 956:	60 ff       	sbrs	r22, 0
 958:	04 c0       	rjmp	.+8      	; 0x962 <__fp_round+0x20>
 95a:	6f 5f       	subi	r22, 0xFF	; 255
 95c:	7f 4f       	sbci	r23, 0xFF	; 255
 95e:	8f 4f       	sbci	r24, 0xFF	; 255
 960:	9f 4f       	sbci	r25, 0xFF	; 255
 962:	08 95       	ret

00000964 <__fp_split3>:
 964:	57 fd       	sbrc	r21, 7
 966:	90 58       	subi	r25, 0x80	; 128
 968:	44 0f       	add	r20, r20
 96a:	55 1f       	adc	r21, r21
 96c:	59 f0       	breq	.+22     	; 0x984 <__fp_splitA+0x10>
 96e:	5f 3f       	cpi	r21, 0xFF	; 255
 970:	71 f0       	breq	.+28     	; 0x98e <__fp_splitA+0x1a>
 972:	47 95       	ror	r20

00000974 <__fp_splitA>:
 974:	88 0f       	add	r24, r24
 976:	97 fb       	bst	r25, 7
 978:	99 1f       	adc	r25, r25
 97a:	61 f0       	breq	.+24     	; 0x994 <__fp_splitA+0x20>
 97c:	9f 3f       	cpi	r25, 0xFF	; 255
 97e:	79 f0       	breq	.+30     	; 0x99e <__fp_splitA+0x2a>
 980:	87 95       	ror	r24
 982:	08 95       	ret
 984:	12 16       	cp	r1, r18
 986:	13 06       	cpc	r1, r19
 988:	14 06       	cpc	r1, r20
 98a:	55 1f       	adc	r21, r21
 98c:	f2 cf       	rjmp	.-28     	; 0x972 <__fp_split3+0xe>
 98e:	46 95       	lsr	r20
 990:	f1 df       	rcall	.-30     	; 0x974 <__fp_splitA>
 992:	08 c0       	rjmp	.+16     	; 0x9a4 <__fp_splitA+0x30>
 994:	16 16       	cp	r1, r22
 996:	17 06       	cpc	r1, r23
 998:	18 06       	cpc	r1, r24
 99a:	99 1f       	adc	r25, r25
 99c:	f1 cf       	rjmp	.-30     	; 0x980 <__fp_splitA+0xc>
 99e:	86 95       	lsr	r24
 9a0:	71 05       	cpc	r23, r1
 9a2:	61 05       	cpc	r22, r1
 9a4:	08 94       	sec
 9a6:	08 95       	ret

000009a8 <__fp_zero>:
 9a8:	e8 94       	clt

000009aa <__fp_szero>:
 9aa:	bb 27       	eor	r27, r27
 9ac:	66 27       	eor	r22, r22
 9ae:	77 27       	eor	r23, r23
 9b0:	cb 01       	movw	r24, r22
 9b2:	97 f9       	bld	r25, 7
 9b4:	08 95       	ret

000009b6 <inverse>:
 9b6:	9b 01       	movw	r18, r22
 9b8:	ac 01       	movw	r20, r24
 9ba:	60 e0       	ldi	r22, 0x00	; 0
 9bc:	70 e0       	ldi	r23, 0x00	; 0
 9be:	80 e8       	ldi	r24, 0x80	; 128
 9c0:	9f e3       	ldi	r25, 0x3F	; 63
 9c2:	ad ce       	rjmp	.-678    	; 0x71e <__divsf3>

000009c4 <__mulsf3>:
 9c4:	0b d0       	rcall	.+22     	; 0x9dc <__mulsf3x>
 9c6:	bd cf       	rjmp	.-134    	; 0x942 <__fp_round>
 9c8:	ae df       	rcall	.-164    	; 0x926 <__fp_pscA>
 9ca:	28 f0       	brcs	.+10     	; 0x9d6 <__mulsf3+0x12>
 9cc:	b3 df       	rcall	.-154    	; 0x934 <__fp_pscB>
 9ce:	18 f0       	brcs	.+6      	; 0x9d6 <__mulsf3+0x12>
 9d0:	95 23       	and	r25, r21
 9d2:	09 f0       	breq	.+2      	; 0x9d6 <__mulsf3+0x12>
 9d4:	7a cf       	rjmp	.-268    	; 0x8ca <__fp_inf>
 9d6:	7f cf       	rjmp	.-258    	; 0x8d6 <__fp_nan>
 9d8:	11 24       	eor	r1, r1
 9da:	e7 cf       	rjmp	.-50     	; 0x9aa <__fp_szero>

000009dc <__mulsf3x>:
 9dc:	c3 df       	rcall	.-122    	; 0x964 <__fp_split3>
 9de:	a0 f3       	brcs	.-24     	; 0x9c8 <__mulsf3+0x4>

000009e0 <__mulsf3_pse>:
 9e0:	95 9f       	mul	r25, r21
 9e2:	d1 f3       	breq	.-12     	; 0x9d8 <__mulsf3+0x14>
 9e4:	95 0f       	add	r25, r21
 9e6:	50 e0       	ldi	r21, 0x00	; 0
 9e8:	55 1f       	adc	r21, r21
 9ea:	62 9f       	mul	r22, r18
 9ec:	f0 01       	movw	r30, r0
 9ee:	72 9f       	mul	r23, r18
 9f0:	bb 27       	eor	r27, r27
 9f2:	f0 0d       	add	r31, r0
 9f4:	b1 1d       	adc	r27, r1
 9f6:	63 9f       	mul	r22, r19
 9f8:	aa 27       	eor	r26, r26
 9fa:	f0 0d       	add	r31, r0
 9fc:	b1 1d       	adc	r27, r1
 9fe:	aa 1f       	adc	r26, r26
 a00:	64 9f       	mul	r22, r20
 a02:	66 27       	eor	r22, r22
 a04:	b0 0d       	add	r27, r0
 a06:	a1 1d       	adc	r26, r1
 a08:	66 1f       	adc	r22, r22
 a0a:	82 9f       	mul	r24, r18
 a0c:	22 27       	eor	r18, r18
 a0e:	b0 0d       	add	r27, r0
 a10:	a1 1d       	adc	r26, r1
 a12:	62 1f       	adc	r22, r18
 a14:	73 9f       	mul	r23, r19
 a16:	b0 0d       	add	r27, r0
 a18:	a1 1d       	adc	r26, r1
 a1a:	62 1f       	adc	r22, r18
 a1c:	83 9f       	mul	r24, r19
 a1e:	a0 0d       	add	r26, r0
 a20:	61 1d       	adc	r22, r1
 a22:	22 1f       	adc	r18, r18
 a24:	74 9f       	mul	r23, r20
 a26:	33 27       	eor	r19, r19
 a28:	a0 0d       	add	r26, r0
 a2a:	61 1d       	adc	r22, r1
 a2c:	23 1f       	adc	r18, r19
 a2e:	84 9f       	mul	r24, r20
 a30:	60 0d       	add	r22, r0
 a32:	21 1d       	adc	r18, r1
 a34:	82 2f       	mov	r24, r18
 a36:	76 2f       	mov	r23, r22
 a38:	6a 2f       	mov	r22, r26
 a3a:	11 24       	eor	r1, r1
 a3c:	9f 57       	subi	r25, 0x7F	; 127
 a3e:	50 40       	sbci	r21, 0x00	; 0
 a40:	8a f0       	brmi	.+34     	; 0xa64 <__mulsf3_pse+0x84>
 a42:	e1 f0       	breq	.+56     	; 0xa7c <__mulsf3_pse+0x9c>
 a44:	88 23       	and	r24, r24
 a46:	4a f0       	brmi	.+18     	; 0xa5a <__mulsf3_pse+0x7a>
 a48:	ee 0f       	add	r30, r30
 a4a:	ff 1f       	adc	r31, r31
 a4c:	bb 1f       	adc	r27, r27
 a4e:	66 1f       	adc	r22, r22
 a50:	77 1f       	adc	r23, r23
 a52:	88 1f       	adc	r24, r24
 a54:	91 50       	subi	r25, 0x01	; 1
 a56:	50 40       	sbci	r21, 0x00	; 0
 a58:	a9 f7       	brne	.-22     	; 0xa44 <__mulsf3_pse+0x64>
 a5a:	9e 3f       	cpi	r25, 0xFE	; 254
 a5c:	51 05       	cpc	r21, r1
 a5e:	70 f0       	brcs	.+28     	; 0xa7c <__mulsf3_pse+0x9c>
 a60:	34 cf       	rjmp	.-408    	; 0x8ca <__fp_inf>
 a62:	a3 cf       	rjmp	.-186    	; 0x9aa <__fp_szero>
 a64:	5f 3f       	cpi	r21, 0xFF	; 255
 a66:	ec f3       	brlt	.-6      	; 0xa62 <__mulsf3_pse+0x82>
 a68:	98 3e       	cpi	r25, 0xE8	; 232
 a6a:	dc f3       	brlt	.-10     	; 0xa62 <__mulsf3_pse+0x82>
 a6c:	86 95       	lsr	r24
 a6e:	77 95       	ror	r23
 a70:	67 95       	ror	r22
 a72:	b7 95       	ror	r27
 a74:	f7 95       	ror	r31
 a76:	e7 95       	ror	r30
 a78:	9f 5f       	subi	r25, 0xFF	; 255
 a7a:	c1 f7       	brne	.-16     	; 0xa6c <__mulsf3_pse+0x8c>
 a7c:	fe 2b       	or	r31, r30
 a7e:	88 0f       	add	r24, r24
 a80:	91 1d       	adc	r25, r1
 a82:	96 95       	lsr	r25
 a84:	87 95       	ror	r24
 a86:	97 f9       	bld	r25, 7
 a88:	08 95       	ret

00000a8a <square>:
 a8a:	9b 01       	movw	r18, r22
 a8c:	ac 01       	movw	r20, r24
 a8e:	9a cf       	rjmp	.-204    	; 0x9c4 <__mulsf3>

00000a90 <__subsf3>:
 a90:	50 58       	subi	r21, 0x80	; 128

00000a92 <__addsf3>:
 a92:	bb 27       	eor	r27, r27
 a94:	aa 27       	eor	r26, r26
 a96:	0e d0       	rcall	.+28     	; 0xab4 <__addsf3x>
 a98:	54 cf       	rjmp	.-344    	; 0x942 <__fp_round>
 a9a:	45 df       	rcall	.-374    	; 0x926 <__fp_pscA>
 a9c:	30 f0       	brcs	.+12     	; 0xaaa <__addsf3+0x18>
 a9e:	4a df       	rcall	.-364    	; 0x934 <__fp_pscB>
 aa0:	20 f0       	brcs	.+8      	; 0xaaa <__addsf3+0x18>
 aa2:	31 f4       	brne	.+12     	; 0xab0 <__addsf3+0x1e>
 aa4:	9f 3f       	cpi	r25, 0xFF	; 255
 aa6:	11 f4       	brne	.+4      	; 0xaac <__addsf3+0x1a>
 aa8:	1e f4       	brtc	.+6      	; 0xab0 <__addsf3+0x1e>
 aaa:	15 cf       	rjmp	.-470    	; 0x8d6 <__fp_nan>
 aac:	0e f4       	brtc	.+2      	; 0xab0 <__addsf3+0x1e>
 aae:	e0 95       	com	r30
 ab0:	e7 fb       	bst	r30, 7
 ab2:	0b cf       	rjmp	.-490    	; 0x8ca <__fp_inf>

00000ab4 <__addsf3x>:
 ab4:	e9 2f       	mov	r30, r25
 ab6:	56 df       	rcall	.-340    	; 0x964 <__fp_split3>
 ab8:	80 f3       	brcs	.-32     	; 0xa9a <__addsf3+0x8>
 aba:	ba 17       	cp	r27, r26
 abc:	62 07       	cpc	r22, r18
 abe:	73 07       	cpc	r23, r19
 ac0:	84 07       	cpc	r24, r20
 ac2:	95 07       	cpc	r25, r21
 ac4:	18 f0       	brcs	.+6      	; 0xacc <__addsf3x+0x18>
 ac6:	71 f4       	brne	.+28     	; 0xae4 <__addsf3x+0x30>
 ac8:	9e f5       	brtc	.+102    	; 0xb30 <__addsf3x+0x7c>
 aca:	6e cf       	rjmp	.-292    	; 0x9a8 <__fp_zero>
 acc:	0e f4       	brtc	.+2      	; 0xad0 <__addsf3x+0x1c>
 ace:	e0 95       	com	r30
 ad0:	0b 2e       	mov	r0, r27
 ad2:	ba 2f       	mov	r27, r26
 ad4:	a0 2d       	mov	r26, r0
 ad6:	0b 01       	movw	r0, r22
 ad8:	b9 01       	movw	r22, r18
 ada:	90 01       	movw	r18, r0
 adc:	0c 01       	movw	r0, r24
 ade:	ca 01       	movw	r24, r20
 ae0:	a0 01       	movw	r20, r0
 ae2:	11 24       	eor	r1, r1
 ae4:	ff 27       	eor	r31, r31
 ae6:	59 1b       	sub	r21, r25
 ae8:	99 f0       	breq	.+38     	; 0xb10 <__addsf3x+0x5c>
 aea:	59 3f       	cpi	r21, 0xF9	; 249
 aec:	50 f4       	brcc	.+20     	; 0xb02 <__addsf3x+0x4e>
 aee:	50 3e       	cpi	r21, 0xE0	; 224
 af0:	68 f1       	brcs	.+90     	; 0xb4c <__addsf3x+0x98>
 af2:	1a 16       	cp	r1, r26
 af4:	f0 40       	sbci	r31, 0x00	; 0
 af6:	a2 2f       	mov	r26, r18
 af8:	23 2f       	mov	r18, r19
 afa:	34 2f       	mov	r19, r20
 afc:	44 27       	eor	r20, r20
 afe:	58 5f       	subi	r21, 0xF8	; 248
 b00:	f3 cf       	rjmp	.-26     	; 0xae8 <__addsf3x+0x34>
 b02:	46 95       	lsr	r20
 b04:	37 95       	ror	r19
 b06:	27 95       	ror	r18
 b08:	a7 95       	ror	r26
 b0a:	f0 40       	sbci	r31, 0x00	; 0
 b0c:	53 95       	inc	r21
 b0e:	c9 f7       	brne	.-14     	; 0xb02 <__addsf3x+0x4e>
 b10:	7e f4       	brtc	.+30     	; 0xb30 <__addsf3x+0x7c>
 b12:	1f 16       	cp	r1, r31
 b14:	ba 0b       	sbc	r27, r26
 b16:	62 0b       	sbc	r22, r18
 b18:	73 0b       	sbc	r23, r19
 b1a:	84 0b       	sbc	r24, r20
 b1c:	ba f0       	brmi	.+46     	; 0xb4c <__addsf3x+0x98>
 b1e:	91 50       	subi	r25, 0x01	; 1
 b20:	a1 f0       	breq	.+40     	; 0xb4a <__addsf3x+0x96>
 b22:	ff 0f       	add	r31, r31
 b24:	bb 1f       	adc	r27, r27
 b26:	66 1f       	adc	r22, r22
 b28:	77 1f       	adc	r23, r23
 b2a:	88 1f       	adc	r24, r24
 b2c:	c2 f7       	brpl	.-16     	; 0xb1e <__addsf3x+0x6a>
 b2e:	0e c0       	rjmp	.+28     	; 0xb4c <__addsf3x+0x98>
 b30:	ba 0f       	add	r27, r26
 b32:	62 1f       	adc	r22, r18
 b34:	73 1f       	adc	r23, r19
 b36:	84 1f       	adc	r24, r20
 b38:	48 f4       	brcc	.+18     	; 0xb4c <__addsf3x+0x98>
 b3a:	87 95       	ror	r24
 b3c:	77 95       	ror	r23
 b3e:	67 95       	ror	r22
 b40:	b7 95       	ror	r27
 b42:	f7 95       	ror	r31
 b44:	9e 3f       	cpi	r25, 0xFE	; 254
 b46:	08 f0       	brcs	.+2      	; 0xb4a <__addsf3x+0x96>
 b48:	b3 cf       	rjmp	.-154    	; 0xab0 <__addsf3+0x1e>
 b4a:	93 95       	inc	r25
 b4c:	88 0f       	add	r24, r24
 b4e:	08 f0       	brcs	.+2      	; 0xb52 <__addsf3x+0x9e>
 b50:	99 27       	eor	r25, r25
 b52:	ee 0f       	add	r30, r30
 b54:	97 95       	ror	r25
 b56:	87 95       	ror	r24
 b58:	08 95       	ret

00000b5a <_exit>:
 b5a:	f8 94       	cli

00000b5c <__stop_program>:
 b5c:	ff cf       	rjmp	.-2      	; 0xb5c <__stop_program>
